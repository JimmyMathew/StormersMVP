{"file_contents":{"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ProductCard.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ShoppingCart } from 'lucide-react';\n\ninterface ProductCardProps {\n  id: string;\n  name: string;\n  price: number;\n  image: string;\n  category: string;\n  inStock: boolean;\n  onAddToCart?: () => void;\n}\n\nexport default function ProductCard({\n  name,\n  price,\n  image,\n  category,\n  inStock,\n  onAddToCart,\n}: ProductCardProps) {\n  return (\n    <Card className=\"overflow-hidden hover-elevate\">\n      <div className=\"aspect-square bg-muted relative\">\n        <img src={image} alt={name} className=\"w-full h-full object-cover\" />\n        {!inStock && (\n          <Badge className=\"absolute top-2 right-2 bg-destructive text-destructive-foreground\">\n            Out of Stock\n          </Badge>\n        )}\n      </div>\n      <div className=\"p-4\">\n        <Badge variant=\"secondary\" className=\"mb-2\">{category}</Badge>\n        <h3 className=\"font-semibold mb-1\">{name}</h3>\n        <p className=\"text-2xl font-bold font-mono text-primary mb-3\">${price.toFixed(2)}</p>\n        <Button\n          onClick={onAddToCart}\n          disabled={!inStock}\n          className=\"w-full gap-2\"\n          data-testid={`button-add-cart-${name.toLowerCase().replace(/\\s+/g, '-')}`}\n        >\n          <ShoppingCart className=\"w-4 h-4\" />\n          Add to Cart\n        </Button>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1436},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/examples/StatCard.tsx":{"content":"import StatCard from '../StatCard';\nimport { Users, Trophy, ShoppingBag } from 'lucide-react';\n\nexport default function StatCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-4\">\n      <StatCard\n        title=\"Total Players\"\n        value=\"1,234\"\n        icon={Users}\n        trend={{ value: 12.5, isPositive: true }}\n      />\n      <StatCard\n        title=\"Active Tournaments\"\n        value=\"24\"\n        icon={Trophy}\n        trend={{ value: 8.2, isPositive: true }}\n      />\n      <StatCard\n        title=\"Merch Sales\"\n        value=\"$12.5K\"\n        icon={ShoppingBag}\n        trend={{ value: 3.1, isPositive: false }}\n      />\n    </div>\n  );\n}\n","size_bytes":684},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/pages/examples/OrganizerDashboard.tsx":{"content":"import OrganizerDashboard from '../OrganizerDashboard';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { CartProvider } from '@/contexts/CartContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\nimport Header from '@/components/Header';\n\nexport default function OrganizerDashboardExample() {\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <CartProvider>\n          <Header />\n          <OrganizerDashboard />\n        </CartProvider>\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":523},"client/src/components/StatCard.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { LucideIcon } from 'lucide-react';\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  trend?: {\n    value: number;\n    isPositive: boolean;\n  };\n  className?: string;\n}\n\nexport default function StatCard({ title, value, icon: Icon, trend, className }: StatCardProps) {\n  return (\n    <Card className={`p-4 ${className || ''}`}>\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm text-muted-foreground mb-1\">{title}</p>\n          <p className=\"text-3xl font-bold font-mono\">{value}</p>\n          {trend && (\n            <div className=\"flex items-center gap-1 mt-2\">\n              <span className={`text-sm font-medium ${trend.isPositive ? 'text-chart-3' : 'text-destructive'}`}>\n                {trend.isPositive ? 'â†‘' : 'â†“'} {Math.abs(trend.value)}%\n              </span>\n              <span className=\"text-xs text-muted-foreground\">vs last month</span>\n            </div>\n          )}\n        </div>\n        <div className=\"p-3 bg-primary/10 rounded-md\">\n          <Icon className=\"w-6 h-6 text-primary\" />\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1225},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/pages/examples/PlayerDashboard.tsx":{"content":"import PlayerDashboard from '../PlayerDashboard';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { CartProvider } from '@/contexts/CartContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\nimport Header from '@/components/Header';\n\nexport default function PlayerDashboardExample() {\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <CartProvider>\n          <Header />\n          <PlayerDashboard />\n        </CartProvider>\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":511},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Tournament,\n  type InsertTournament,\n  type Team,\n  type InsertTeam,\n  type Player,\n  type InsertPlayer,\n  type Match,\n  type InsertMatch,\n  type MatchStats,\n  type InsertMatchStats,\n  type Product,\n  type InsertProduct,\n  type Order,\n  type InsertOrder,\n  type Court,\n  type InsertCourt,\n  type Media,\n  type InsertMedia,\n  type Inquiry,\n  type InsertInquiry,\n  type BrandAsset,\n  type InsertBrandAsset,\n  users,\n  tournaments,\n  teams,\n  players,\n  matches,\n  matchStats,\n  products,\n  orders,\n  courts,\n  media,\n  inquiries,\n  brandAssets\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  getTournaments(): Promise<Tournament[]>;\n  getTournament(id: string): Promise<Tournament | undefined>;\n  createTournament(tournament: InsertTournament): Promise<Tournament>;\n  updateTournament(id: string, tournament: Partial<Tournament>): Promise<Tournament | undefined>;\n  deleteTournament(id: string): Promise<boolean>;\n\n  getTeamsByTournament(tournamentId: string): Promise<Team[]>;\n  getTeam(id: string): Promise<Team | undefined>;\n  createTeam(team: InsertTeam): Promise<Team>;\n  updateTeam(id: string, team: Partial<Team>): Promise<Team | undefined>;\n  deleteTeam(id: string): Promise<boolean>;\n\n  getPlayersByTeam(teamId: string): Promise<Player[]>;\n  getPlayer(id: string): Promise<Player | undefined>;\n  createPlayer(player: InsertPlayer): Promise<Player>;\n  updatePlayer(id: string, player: Partial<Player>): Promise<Player | undefined>;\n  deletePlayer(id: string): Promise<boolean>;\n\n  getMatchesByTournament(tournamentId: string): Promise<Match[]>;\n  getMatch(id: string): Promise<Match | undefined>;\n  createMatch(match: InsertMatch): Promise<Match>;\n  updateMatch(id: string, match: Partial<Match>): Promise<Match | undefined>;\n  deleteMatch(id: string): Promise<boolean>;\n\n  getMatchStatsByMatch(matchId: string): Promise<MatchStats[]>;\n  createMatchStats(stats: InsertMatchStats): Promise<MatchStats>;\n  updateMatchStats(id: string, stats: Partial<MatchStats>): Promise<MatchStats | undefined>;\n\n  getProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<Product>): Promise<Product | undefined>;\n\n  getOrders(): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n\n  getCourts(): Promise<Court[]>;\n  getCourt(id: string): Promise<Court | undefined>;\n  createCourt(court: InsertCourt): Promise<Court>;\n  updateCourt(id: string, court: Partial<Court>): Promise<Court | undefined>;\n\n  getMedia(): Promise<Media[]>;\n  getMediaByTournament(tournamentId: string): Promise<Media[]>;\n  getMediaItem(id: string): Promise<Media | undefined>;\n  createMedia(media: InsertMedia): Promise<Media>;\n\n  getInquiries(): Promise<Inquiry[]>;\n  getInquiry(id: string): Promise<Inquiry | undefined>;\n  createInquiry(inquiry: InsertInquiry): Promise<Inquiry>;\n  updateInquiry(id: string, inquiry: Partial<Inquiry>): Promise<Inquiry | undefined>;\n\n  getBrandAssets(sponsorId: string): Promise<BrandAsset[]>;\n  createBrandAsset(asset: InsertBrandAsset): Promise<BrandAsset>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getTournaments(): Promise<Tournament[]> {\n    return await db.select().from(tournaments);\n  }\n\n  async getTournament(id: string): Promise<Tournament | undefined> {\n    const [tournament] = await db.select().from(tournaments).where(eq(tournaments.id, id));\n    return tournament || undefined;\n  }\n\n  async createTournament(insertTournament: InsertTournament): Promise<Tournament> {\n    const [tournament] = await db\n      .insert(tournaments)\n      .values({\n        ...insertTournament,\n        createdAt: new Date().toISOString()\n      })\n      .returning();\n    return tournament;\n  }\n\n  async updateTournament(id: string, updates: Partial<Tournament>): Promise<Tournament | undefined> {\n    const [tournament] = await db\n      .update(tournaments)\n      .set(updates)\n      .where(eq(tournaments.id, id))\n      .returning();\n    return tournament || undefined;\n  }\n\n  async deleteTournament(id: string): Promise<boolean> {\n    const result = await db.delete(tournaments).where(eq(tournaments.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getTeamsByTournament(tournamentId: string): Promise<Team[]> {\n    return await db.select().from(teams).where(eq(teams.tournamentId, tournamentId));\n  }\n\n  async getTeam(id: string): Promise<Team | undefined> {\n    const [team] = await db.select().from(teams).where(eq(teams.id, id));\n    return team || undefined;\n  }\n\n  async createTeam(insertTeam: InsertTeam): Promise<Team> {\n    const [team] = await db\n      .insert(teams)\n      .values(insertTeam)\n      .returning();\n    return team;\n  }\n\n  async updateTeam(id: string, updates: Partial<Team>): Promise<Team | undefined> {\n    const [team] = await db\n      .update(teams)\n      .set(updates)\n      .where(eq(teams.id, id))\n      .returning();\n    return team || undefined;\n  }\n\n  async deleteTeam(id: string): Promise<boolean> {\n    const result = await db.delete(teams).where(eq(teams.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getPlayersByTeam(teamId: string): Promise<Player[]> {\n    return await db.select().from(players).where(eq(players.teamId, teamId));\n  }\n\n  async getPlayer(id: string): Promise<Player | undefined> {\n    const [player] = await db.select().from(players).where(eq(players.id, id));\n    return player || undefined;\n  }\n\n  async createPlayer(insertPlayer: InsertPlayer): Promise<Player> {\n    const [player] = await db\n      .insert(players)\n      .values(insertPlayer)\n      .returning();\n    return player;\n  }\n\n  async updatePlayer(id: string, updates: Partial<Player>): Promise<Player | undefined> {\n    const [player] = await db\n      .update(players)\n      .set(updates)\n      .where(eq(players.id, id))\n      .returning();\n    return player || undefined;\n  }\n\n  async deletePlayer(id: string): Promise<boolean> {\n    const result = await db.delete(players).where(eq(players.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getMatchesByTournament(tournamentId: string): Promise<Match[]> {\n    return await db.select().from(matches).where(eq(matches.tournamentId, tournamentId));\n  }\n\n  async getMatch(id: string): Promise<Match | undefined> {\n    const [match] = await db.select().from(matches).where(eq(matches.id, id));\n    return match || undefined;\n  }\n\n  async createMatch(insertMatch: InsertMatch): Promise<Match> {\n    const [match] = await db\n      .insert(matches)\n      .values(insertMatch)\n      .returning();\n    return match;\n  }\n\n  async updateMatch(id: string, updates: Partial<Match>): Promise<Match | undefined> {\n    const [match] = await db\n      .update(matches)\n      .set(updates)\n      .where(eq(matches.id, id))\n      .returning();\n    return match || undefined;\n  }\n\n  async deleteMatch(id: string): Promise<boolean> {\n    const result = await db.delete(matches).where(eq(matches.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getMatchStatsByMatch(matchId: string): Promise<MatchStats[]> {\n    return await db.select().from(matchStats).where(eq(matchStats.matchId, matchId));\n  }\n\n  async createMatchStats(insertStats: InsertMatchStats): Promise<MatchStats> {\n    const [stats] = await db\n      .insert(matchStats)\n      .values(insertStats)\n      .returning();\n    return stats;\n  }\n\n  async updateMatchStats(id: string, updates: Partial<MatchStats>): Promise<MatchStats | undefined> {\n    const [stats] = await db\n      .update(matchStats)\n      .set(updates)\n      .where(eq(matchStats.id, id))\n      .returning();\n    return stats || undefined;\n  }\n\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products);\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const [product] = await db\n      .insert(products)\n      .values({\n        ...insertProduct,\n        createdAt: new Date().toISOString()\n      })\n      .returning();\n    return product;\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined> {\n    const [product] = await db\n      .update(products)\n      .set(updates)\n      .where(eq(products.id, id))\n      .returning();\n    return product || undefined;\n  }\n\n  async getOrders(): Promise<Order[]> {\n    return await db.select().from(orders);\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order || undefined;\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const [order] = await db\n      .insert(orders)\n      .values({\n        ...insertOrder,\n        createdAt: new Date().toISOString()\n      })\n      .returning();\n    return order;\n  }\n\n  async getCourts(): Promise<Court[]> {\n    return await db.select().from(courts);\n  }\n\n  async getCourt(id: string): Promise<Court | undefined> {\n    const [court] = await db.select().from(courts).where(eq(courts.id, id));\n    return court || undefined;\n  }\n\n  async createCourt(insertCourt: InsertCourt): Promise<Court> {\n    const [court] = await db\n      .insert(courts)\n      .values({\n        ...insertCourt,\n        createdAt: new Date().toISOString()\n      })\n      .returning();\n    return court;\n  }\n\n  async updateCourt(id: string, updates: Partial<Court>): Promise<Court | undefined> {\n    const [court] = await db\n      .update(courts)\n      .set(updates)\n      .where(eq(courts.id, id))\n      .returning();\n    return court || undefined;\n  }\n\n  async getMedia(): Promise<Media[]> {\n    return await db.select().from(media);\n  }\n\n  async getMediaByTournament(tournamentId: string): Promise<Media[]> {\n    return await db.select().from(media).where(eq(media.tournamentId, tournamentId));\n  }\n\n  async getMediaItem(id: string): Promise<Media | undefined> {\n    const [mediaItem] = await db.select().from(media).where(eq(media.id, id));\n    return mediaItem || undefined;\n  }\n\n  async createMedia(insertMedia: InsertMedia): Promise<Media> {\n    const [mediaItem] = await db\n      .insert(media)\n      .values({\n        ...insertMedia,\n        createdAt: new Date().toISOString()\n      })\n      .returning();\n    return mediaItem;\n  }\n\n  async getInquiries(): Promise<Inquiry[]> {\n    return await db.select().from(inquiries);\n  }\n\n  async getInquiry(id: string): Promise<Inquiry | undefined> {\n    const [inquiry] = await db.select().from(inquiries).where(eq(inquiries.id, id));\n    return inquiry || undefined;\n  }\n\n  async createInquiry(insertInquiry: InsertInquiry): Promise<Inquiry> {\n    const [inquiry] = await db\n      .insert(inquiries)\n      .values({\n        ...insertInquiry,\n        createdAt: new Date().toISOString()\n      })\n      .returning();\n    return inquiry;\n  }\n\n  async updateInquiry(id: string, updates: Partial<Inquiry>): Promise<Inquiry | undefined> {\n    const [inquiry] = await db\n      .update(inquiries)\n      .set(updates)\n      .where(eq(inquiries.id, id))\n      .returning();\n    return inquiry || undefined;\n  }\n\n  async getBrandAssets(sponsorId: string): Promise<BrandAsset[]> {\n    return await db.select().from(brandAssets).where(eq(brandAssets.sponsorId, sponsorId));\n  }\n\n  async createBrandAsset(insertAsset: InsertBrandAsset): Promise<BrandAsset> {\n    const [asset] = await db\n      .insert(brandAssets)\n      .values({\n        ...insertAsset,\n        createdAt: new Date().toISOString()\n      })\n      .returning();\n    return asset;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":12646},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/contexts/CartContext.tsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react';\n\nexport interface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n  image: string;\n  size?: string;\n}\n\ninterface CartContextType {\n  items: CartItem[];\n  addItem: (item: Omit<CartItem, 'quantity'>) => void;\n  removeItem: (id: string) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  clearCart: () => void;\n  total: number;\n  itemCount: number;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const [items, setItems] = useState<CartItem[]>([]);\n\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      setItems(JSON.parse(savedCart));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(items));\n  }, [items]);\n\n  const addItem = (item: Omit<CartItem, 'quantity'>) => {\n    setItems((prev) => {\n      const existing = prev.find((i) => i.id === item.id && i.size === item.size);\n      if (existing) {\n        return prev.map((i) =>\n          i.id === item.id && i.size === item.size\n            ? { ...i, quantity: i.quantity + 1 }\n            : i\n        );\n      }\n      return [...prev, { ...item, quantity: 1 }];\n    });\n  };\n\n  const removeItem = (id: string) => {\n    setItems((prev) => prev.filter((item) => item.id !== id));\n  };\n\n  const updateQuantity = (id: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeItem(id);\n      return;\n    }\n    setItems((prev) =>\n      prev.map((item) => (item.id === id ? { ...item, quantity } : item))\n    );\n  };\n\n  const clearCart = () => {\n    setItems([]);\n  };\n\n  const total = items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  const itemCount = items.reduce((sum, item) => sum + item.quantity, 0);\n\n  return (\n    <CartContext.Provider\n      value={{\n        items,\n        addItem,\n        removeItem,\n        updateQuantity,\n        clearCart,\n        total,\n        itemCount,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within CartProvider');\n  }\n  return context;\n}\n","size_bytes":2317},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/tournaments/TeamRegistrationForm.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { insertTeamSchema, type InsertTeam } from '@shared/schema';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Users } from 'lucide-react';\n\ninterface TeamRegistrationFormProps {\n  tournamentId: string;\n  onSuccess?: () => void;\n}\n\nexport default function TeamRegistrationForm({ tournamentId, onSuccess }: TeamRegistrationFormProps) {\n  const { toast } = useToast();\n\n  const form = useForm<InsertTeam>({\n    resolver: zodResolver(insertTeamSchema),\n    defaultValues: {\n      name: '',\n      university: '',\n      tournamentId,\n    },\n  });\n\n  const createTeam = useMutation({\n    mutationFn: async (data: InsertTeam) => {\n      return await apiRequest('POST', '/api/teams', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tournaments', tournamentId, 'teams'] });\n      toast({\n        title: 'Team registered',\n        description: 'The team has been registered successfully.',\n      });\n      form.reset({ name: '', university: '', tournamentId });\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to register team. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertTeam) => {\n    createTeam.mutate(data);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Users className=\"w-5 h-5\" />\n          Register Team\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Team Name</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"The Stormers\" \n                      {...field} \n                      data-testid=\"input-team-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"university\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>University/Organization (Optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Toulouse University\" \n                      {...field}\n                      value={field.value ?? ''}\n                      data-testid=\"input-team-university\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={createTeam.isPending}\n              data-testid=\"button-register-team\"\n            >\n              {createTeam.isPending ? 'Registering...' : 'Register Team'}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3680},"client/src/pages/SponsorDashboard.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport StatCard from '@/components/StatCard';\nimport TournamentCard from '@/components/TournamentCard';\nimport SponsorInquiryForm from '@/components/SponsorInquiryForm';\nimport { Eye, TrendingUp, ShoppingBag, Users } from 'lucide-react';\n\nexport default function SponsorDashboard() {\n  const metrics = [\n    { title: 'Total Impressions', value: '45.2K', icon: Eye, trend: { value: 12.5, isPositive: true } },\n    { title: 'Engagement Rate', value: '8.4%', icon: TrendingUp, trend: { value: 2.1, isPositive: true } },\n    { title: 'Merch Revenue', value: '$12.5K', icon: ShoppingBag, trend: { value: 5.3, isPositive: false } },\n    { title: 'Event Attendance', value: '1,234', icon: Users, trend: { value: 18.2, isPositive: true } },\n  ];\n\n  const activeTournaments = [\n    {\n      id: '1',\n      name: 'Summer Slam 2025',\n      location: 'Downtown Courts',\n      date: 'June 15, 2025',\n      teams: 12,\n      maxTeams: 16,\n      status: 'upcoming' as const,\n    },\n    {\n      id: '2',\n      name: 'University Challenge',\n      location: 'Campus Recreation Center',\n      date: 'July 1, 2025',\n      teams: 8,\n      maxTeams: 8,\n      status: 'live' as const,\n    },\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-display font-bold mb-2\">Sponsor Dashboard</h1>\n        <p className=\"text-muted-foreground\">Monitor your brand visibility and engagement</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n        {metrics.map((metric) => (\n          <StatCard key={metric.title} {...metric} />\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n        <SponsorInquiryForm \n          type=\"corporate\"\n          title=\"Corporate Services\"\n          description=\"Inquire about custom sponsorship packages, court branding opportunities, and event partnerships\"\n        />\n\n        <SponsorInquiryForm \n          type=\"b2b\"\n          title=\"B2B Partnerships\"\n          description=\"Connect with our team for business-to-business collaborations and strategic partnerships\"\n        />\n      </div>\n\n      <div className=\"mb-4\">\n        <h2 className=\"text-xl font-display font-semibold mb-4\">Sponsored Tournaments</h2>\n      </div>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {activeTournaments.map((tournament) => (\n          <TournamentCard\n            key={tournament.id}\n            {...tournament}\n            onView={() => console.log('View analytics for', tournament.name)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2750},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/tournaments/LiveMatchDashboard.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { type Match, type Team, type Player, type MatchStats } from '@shared/schema';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { Activity, Trophy, Award } from 'lucide-react';\n\ninterface LiveMatchDashboardProps {\n  match: Match;\n  onUpdate?: () => void;\n}\n\nexport default function LiveMatchDashboard({ match, onUpdate }: LiveMatchDashboardProps) {\n  const { toast } = useToast();\n  const [team1Score, setTeam1Score] = useState(match.team1Score);\n  const [team2Score, setTeam2Score] = useState(match.team2Score);\n  const [selectedMvp, setSelectedMvp] = useState(match.mvpId || '');\n\n  const { data: team1 } = useQuery<Team>({\n    queryKey: ['/api/teams', match.team1Id],\n  });\n\n  const { data: team2 } = useQuery<Team>({\n    queryKey: ['/api/teams', match.team2Id],\n  });\n\n  const { data: team1Players = [] } = useQuery<Player[]>({\n    queryKey: ['/api/teams', match.team1Id, 'players'],\n  });\n\n  const { data: team2Players = [] } = useQuery<Player[]>({\n    queryKey: ['/api/teams', match.team2Id, 'players'],\n  });\n\n  const { data: matchStats = [] } = useQuery<MatchStats[]>({\n    queryKey: ['/api/matches', match.id, 'stats'],\n  });\n\n  const allPlayers = [...team1Players, ...team2Players];\n\n  const updateScore = useMutation({\n    mutationFn: async () => {\n      const winnerId = team1Score > team2Score ? match.team1Id : team2Score > team1Score ? match.team2Id : null;\n      return await apiRequest('PATCH', `/api/matches/${match.id}`, {\n        team1Score,\n        team2Score,\n        status: team1Score >= 21 || team2Score >= 21 ? 'completed' : 'in-progress',\n        winnerId,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tournaments', match.tournamentId, 'matches'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/matches', match.id] });\n      toast({\n        title: 'Score updated',\n        description: 'Match score has been updated successfully.',\n      });\n      onUpdate?.();\n    },\n  });\n\n  const updateMvp = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('PATCH', `/api/matches/${match.id}`, {\n        mvpId: selectedMvp,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/matches', match.id] });\n      toast({\n        title: 'MVP selected',\n        description: 'Match MVP has been selected successfully.',\n      });\n    },\n  });\n\n  const updatePlayerStats = useMutation({\n    mutationFn: async (data: { playerId: string; points: number; assists: number; rebounds: number }) => {\n      const existingStats = matchStats.find(s => s.playerId === data.playerId);\n      if (existingStats) {\n        return await apiRequest('PATCH', `/api/match-stats/${existingStats.id}`, data);\n      } else {\n        return await apiRequest('POST', '/api/match-stats', {\n          matchId: match.id,\n          ...data,\n        });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/matches', match.id, 'stats'] });\n      toast({\n        title: 'Stats updated',\n        description: 'Player stats have been updated successfully.',\n      });\n    },\n  });\n\n  const getPlayerStats = (playerId: string) => {\n    return matchStats.find(s => s.playerId === playerId) || { points: 0, assists: 0, rebounds: 0 };\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Activity className=\"w-5 h-5\" />\n          Live Match Scoring\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue=\"score\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"score\" data-testid=\"tab-score\">Score</TabsTrigger>\n            <TabsTrigger value=\"stats\" data-testid=\"tab-stats\">Stats</TabsTrigger>\n            <TabsTrigger value=\"mvp\" data-testid=\"tab-mvp\">MVP</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"score\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"team1-score\">{team1?.name || 'Team 1'}</Label>\n                <Input\n                  id=\"team1-score\"\n                  type=\"number\"\n                  value={team1Score}\n                  onChange={(e) => setTeam1Score(parseInt(e.target.value) || 0)}\n                  min={0}\n                  data-testid=\"input-team1-score\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"team2-score\">{team2?.name || 'Team 2'}</Label>\n                <Input\n                  id=\"team2-score\"\n                  type=\"number\"\n                  value={team2Score}\n                  onChange={(e) => setTeam2Score(parseInt(e.target.value) || 0)}\n                  min={0}\n                  data-testid=\"input-team2-score\"\n                />\n              </div>\n            </div>\n            <Button\n              onClick={() => updateScore.mutate()}\n              disabled={updateScore.isPending}\n              className=\"w-full\"\n              data-testid=\"button-update-score\"\n            >\n              <Trophy className=\"w-4 h-4 mr-2\" />\n              {updateScore.isPending ? 'Updating...' : 'Update Score'}\n            </Button>\n          </TabsContent>\n\n          <TabsContent value=\"stats\" className=\"space-y-4\">\n            <div className=\"space-y-4\">\n              {allPlayers.map((player) => {\n                const stats = getPlayerStats(player.id);\n                return (\n                  <Card key={player.id} data-testid={`card-player-stats-${player.id}`}>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">{player.name}</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-3 gap-2\">\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-xs\">Points</Label>\n                          <Input\n                            type=\"number\"\n                            defaultValue={stats.points}\n                            min={0}\n                            data-testid={`input-player-points-${player.id}`}\n                            onBlur={(e) => {\n                              updatePlayerStats.mutate({\n                                playerId: player.id,\n                                points: parseInt(e.target.value) || 0,\n                                assists: stats.assists,\n                                rebounds: stats.rebounds,\n                              });\n                            }}\n                          />\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-xs\">Assists</Label>\n                          <Input\n                            type=\"number\"\n                            defaultValue={stats.assists}\n                            min={0}\n                            data-testid={`input-player-assists-${player.id}`}\n                            onBlur={(e) => {\n                              updatePlayerStats.mutate({\n                                playerId: player.id,\n                                points: stats.points,\n                                assists: parseInt(e.target.value) || 0,\n                                rebounds: stats.rebounds,\n                              });\n                            }}\n                          />\n                        </div>\n                        <div className=\"space-y-1\">\n                          <Label className=\"text-xs\">Rebounds</Label>\n                          <Input\n                            type=\"number\"\n                            defaultValue={stats.rebounds}\n                            min={0}\n                            data-testid={`input-player-rebounds-${player.id}`}\n                            onBlur={(e) => {\n                              updatePlayerStats.mutate({\n                                playerId: player.id,\n                                points: stats.points,\n                                assists: stats.assists,\n                                rebounds: parseInt(e.target.value) || 0,\n                              });\n                            }}\n                          />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"mvp\" className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Select Match MVP</Label>\n              <Select onValueChange={setSelectedMvp} defaultValue={selectedMvp}>\n                <SelectTrigger data-testid=\"select-mvp\">\n                  <SelectValue placeholder=\"Choose MVP\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {allPlayers.map((player) => (\n                    <SelectItem key={player.id} value={player.id}>\n                      {player.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <Button\n              onClick={() => updateMvp.mutate()}\n              disabled={updateMvp.isPending || !selectedMvp}\n              className=\"w-full\"\n              data-testid=\"button-select-mvp\"\n            >\n              <Award className=\"w-4 h-4 mr-2\" />\n              {updateMvp.isPending ? 'Selecting...' : 'Select MVP'}\n            </Button>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10237},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/pages/PlayerDashboard.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport StatCard from '@/components/StatCard';\nimport TournamentCard from '@/components/TournamentCard';\nimport { Trophy, Target, TrendingUp, Calendar, MapPin, Users } from 'lucide-react';\n\nexport default function PlayerDashboard() {\n  const [selectedTab, setSelectedTab] = useState('tournaments');\n\n  const upcomingTournaments = [\n    {\n      id: '1',\n      name: 'Summer Slam 2025',\n      location: 'Downtown Courts',\n      date: 'June 15, 2025',\n      teams: 12,\n      maxTeams: 16,\n      status: 'upcoming' as const,\n    },\n    {\n      id: '2',\n      name: 'University Challenge',\n      location: 'Campus Recreation Center',\n      date: 'July 1, 2025',\n      teams: 8,\n      maxTeams: 8,\n      status: 'live' as const,\n    },\n  ];\n\n  const myStats = [\n    { label: 'Points Per Game', value: '12.5', icon: Target },\n    { label: 'Games Played', value: '24', icon: Trophy },\n    { label: 'Win Rate', value: '67%', icon: TrendingUp },\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-display font-bold mb-2\">Player Dashboard</h1>\n        <p className=\"text-muted-foreground\">Track your performance and upcoming tournaments</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n        {myStats.map((stat) => (\n          <StatCard\n            key={stat.label}\n            title={stat.label}\n            value={stat.value}\n            icon={stat.icon}\n          />\n        ))}\n      </div>\n\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"tournaments\" data-testid=\"tab-tournaments\">Tournaments</TabsTrigger>\n          <TabsTrigger value=\"courts\" data-testid=\"tab-courts\">Courts</TabsTrigger>\n          <TabsTrigger value=\"team\" data-testid=\"tab-team\">My Team</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"tournaments\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-display font-semibold\">Upcoming Tournaments</h2>\n            <Link href=\"/tournaments\">\n              <Button variant=\"outline\" data-testid=\"button-view-all\">View All</Button>\n            </Link>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {upcomingTournaments.map((tournament) => (\n              <TournamentCard\n                key={tournament.id}\n                {...tournament}\n                onRegister={() => console.log('Register for', tournament.name)}\n                onView={() => console.log('View', tournament.name)}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"courts\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {['Downtown Courts', 'University Recreation', 'City Park'].map((court) => (\n              <Card key={court} className=\"p-4 hover-elevate\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <h3 className=\"font-semibold\">{court}</h3>\n                  <MapPin className=\"w-5 h-5 text-primary\" />\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-4\">Available today</p>\n                <Button variant=\"outline\" className=\"w-full\" data-testid={`button-view-${court.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  View Details\n                </Button>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"team\" className=\"space-y-4\">\n          <Card className=\"p-6\">\n            <h3 className=\"font-display font-semibold text-lg mb-4\">Court Kings</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Team Record</span>\n                <span className=\"font-semibold\">16-8</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Ranking</span>\n                <span className=\"font-semibold\">#4 in Division</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Members</span>\n                <div className=\"flex items-center gap-1\">\n                  <Users className=\"w-4 h-4\" />\n                  <span className=\"font-semibold\">4 players</span>\n                </div>\n              </div>\n            </div>\n            <Button className=\"w-full mt-4\" data-testid=\"button-manage-team\">Manage Team</Button>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":5043},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/contexts/AuthContext\";\nimport { CartProvider } from \"@/contexts/CartContext\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport Header from \"@/components/Header\";\nimport LoginPage from \"@/pages/LoginPage\";\nimport DashboardRouter from \"@/pages/DashboardRouter\";\nimport MerchShop from \"@/pages/MerchShop\";\nimport TournamentsPage from \"@/pages/TournamentsPage\";\nimport TournamentDetailPage from \"@/pages/TournamentDetailPage\";\nimport CourtsPage from \"@/pages/CourtsPage\";\nimport MediaHubPage from \"@/pages/MediaHubPage\";\nimport DevelopmentCenterPage from \"@/pages/DevelopmentCenterPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const { isAuthenticated } = useAuth();\n  \n  if (!isAuthenticated) {\n    return <Redirect to=\"/login\" />;\n  }\n  \n  return (\n    <>\n      <Header />\n      <Component />\n    </>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/login\">\n        {isAuthenticated ? <Redirect to=\"/dashboard\" /> : <LoginPage />}\n      </Route>\n      <Route path=\"/dashboard\">\n        <ProtectedRoute component={DashboardRouter} />\n      </Route>\n      <Route path=\"/shop\">\n        <ProtectedRoute component={MerchShop} />\n      </Route>\n      <Route path=\"/tournaments\">\n        <ProtectedRoute component={TournamentsPage} />\n      </Route>\n      <Route path=\"/tournaments/:id\">\n        <ProtectedRoute component={TournamentDetailPage} />\n      </Route>\n      <Route path=\"/courts\">\n        <ProtectedRoute component={CourtsPage} />\n      </Route>\n      <Route path=\"/media\">\n        <ProtectedRoute component={MediaHubPage} />\n      </Route>\n      <Route path=\"/development\">\n        <ProtectedRoute component={DevelopmentCenterPage} />\n      </Route>\n      <Route path=\"/\">\n        {isAuthenticated ? <Redirect to=\"/dashboard\" /> : <Redirect to=\"/login\" />}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ThemeProvider>\n          <AuthProvider>\n            <CartProvider>\n              <Toaster />\n              <Router />\n            </CartProvider>\n          </AuthProvider>\n        </ThemeProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2703},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { CartProvider } from '@/contexts/CartContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\n\nexport default function HeaderExample() {\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <CartProvider>\n          <Header />\n          <div className=\"p-8\">\n            <p className=\"text-muted-foreground\">Header appears at the top when logged in</p>\n          </div>\n        </CartProvider>\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":555},"client/src/components/RoleSelector.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { UserRole } from '@/contexts/AuthContext';\nimport { Trophy, Handshake, ClipboardList } from 'lucide-react';\n\ninterface RoleSelectorProps {\n  onSelectRole: (role: UserRole) => void;\n}\n\nconst roles = [\n  {\n    role: 'Player' as UserRole,\n    icon: Trophy,\n    title: 'Player',\n    description: 'Register for tournaments, track stats, and connect with teams',\n  },\n  {\n    role: 'Sponsor' as UserRole,\n    icon: Handshake,\n    title: 'Sponsor',\n    description: 'Support tournaments, boost brand visibility, and access analytics',\n  },\n  {\n    role: 'Organizer' as UserRole,\n    icon: ClipboardList,\n    title: 'Organizer',\n    description: 'Create tournaments, manage teams, and coordinate events',\n  },\n];\n\nexport default function RoleSelector({ onSelectRole }: RoleSelectorProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n      {roles.map(({ role, icon: Icon, title, description }) => (\n        <Card\n          key={role}\n          className=\"p-6 text-center hover-elevate cursor-pointer\"\n          onClick={() => onSelectRole(role)}\n          data-testid={`card-role-${role.toLowerCase()}`}\n        >\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-4 bg-primary/10 rounded-full\">\n              <Icon className=\"w-8 h-8 text-primary\" />\n            </div>\n          </div>\n          <h3 className=\"font-display font-semibold text-xl mb-2\">{title}</h3>\n          <p className=\"text-sm text-muted-foreground\">{description}</p>\n          <Button className=\"w-full mt-4\" data-testid={`button-select-${role.toLowerCase()}`}>\n            Select {title}\n          </Button>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1779},"client/src/pages/LoginPage.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { SiGoogle } from 'react-icons/si';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport RoleSelector from '@/components/RoleSelector';\nimport logoUrl from '@assets/logowhite_1760998128625.png';\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const { login, loginWithGoogle, selectRole } = useAuth();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showRoleSelector, setShowRoleSelector] = useState(false);\n\n  const handleEmailLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await login(email, password);\n    setShowRoleSelector(true);\n  };\n\n  const handleGoogleLogin = async () => {\n    await loginWithGoogle();\n    setShowRoleSelector(true);\n  };\n\n  const handleRoleSelect = (role: 'Player' | 'Sponsor' | 'Organizer') => {\n    selectRole(role);\n    setShowRoleSelector(false);\n    setLocation('/dashboard');\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/20 via-background to-chart-2/20 p-4\">\n      <Card className=\"w-full max-w-md p-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center mb-4\">\n            <img \n              src={logoUrl} \n              alt=\"Stormers360 - Toulouse 3x3 Basketball\" \n              className=\"h-24 w-auto\"\n              style={{ filter: 'invert(1)' }}\n            />\n          </div>\n          <h1 className=\"font-display font-bold text-3xl mb-2\">Welcome to Stormers360</h1>\n          <p className=\"text-muted-foreground\">Sign in to manage your 3x3 basketball experience</p>\n        </div>\n\n        <form onSubmit={handleEmailLogin} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"you@example.com\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              data-testid=\"input-email\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              data-testid=\"input-password\"\n            />\n          </div>\n          <Button type=\"submit\" className=\"w-full\" data-testid=\"button-login\">\n            Sign In\n          </Button>\n        </form>\n\n        <div className=\"relative my-6\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <span className=\"w-full border-t\" />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-card px-2 text-muted-foreground\">Or continue with</span>\n          </div>\n        </div>\n\n        <Button\n          variant=\"outline\"\n          className=\"w-full gap-2\"\n          onClick={handleGoogleLogin}\n          data-testid=\"button-google-login\"\n        >\n          <SiGoogle className=\"w-4 h-4\" />\n          Sign in with Google\n        </Button>\n      </Card>\n\n      <Dialog open={showRoleSelector} onOpenChange={setShowRoleSelector}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl font-display\">Choose Your Role</DialogTitle>\n            <DialogDescription>\n              Select how you want to use the platform. You can change this later.\n            </DialogDescription>\n          </DialogHeader>\n          <RoleSelector onSelectRole={handleRoleSelect} />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":4169},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: false,\n    hmr: {\n      clientPort: 443,\n    },\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1181},"client/src/contexts/ThemeContext.tsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  useEffect(() => {\n    const saved = localStorage.getItem('theme') as Theme;\n    if (saved) {\n      setTheme(saved);\n      document.documentElement.classList.toggle('dark', saved === 'dark');\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.classList.toggle('dark', newTheme === 'dark');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1146},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/pages/DashboardRouter.tsx":{"content":"import { useAuth } from '@/contexts/AuthContext';\nimport PlayerDashboard from './PlayerDashboard';\nimport SponsorDashboard from './SponsorDashboard';\nimport OrganizerDashboard from './OrganizerDashboard';\n\nexport default function DashboardRouter() {\n  const { user } = useAuth();\n\n  if (!user) return null;\n\n  switch (user.role) {\n    case 'Player':\n      return <PlayerDashboard />;\n    case 'Sponsor':\n      return <SponsorDashboard />;\n    case 'Organizer':\n      return <OrganizerDashboard />;\n    default:\n      return <PlayerDashboard />;\n  }\n}\n","size_bytes":551},"client/src/components/examples/RoleSelector.tsx":{"content":"import RoleSelector from '../RoleSelector';\n\nexport default function RoleSelectorExample() {\n  return (\n    <div className=\"p-8\">\n      <h2 className=\"text-2xl font-display font-bold mb-2\">Choose Your Role</h2>\n      <p className=\"text-muted-foreground mb-6\">Select how you want to use the platform</p>\n      <RoleSelector onSelectRole={(role) => console.log('Selected role:', role)} />\n    </div>\n  );\n}\n","size_bytes":405},"client/src/components/examples/ProductCard.tsx":{"content":"import ProductCard from '../ProductCard';\n\nexport default function ProductCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 p-4\">\n      <ProductCard\n        id=\"1\"\n        name=\"Team Jersey\"\n        price={45.99}\n        image=\"https://images.unsplash.com/photo-1516450360452-9312f5e86fc7?w=400&h=400&fit=crop\"\n        category=\"Apparel\"\n        inStock={true}\n        onAddToCart={() => console.log('Added to cart')}\n      />\n      <ProductCard\n        id=\"2\"\n        name=\"Basketball\"\n        price={29.99}\n        image=\"https://images.unsplash.com/photo-1546519638-68e109498ffc?w=400&h=400&fit=crop\"\n        category=\"Equipment\"\n        inStock={true}\n        onAddToCart={() => console.log('Added to cart')}\n      />\n      <ProductCard\n        id=\"3\"\n        name=\"Sweatband Set\"\n        price={12.99}\n        image=\"https://images.unsplash.com/photo-1556906781-9a412961c28c?w=400&h=400&fit=crop\"\n        category=\"Accessories\"\n        inStock={false}\n        onAddToCart={() => console.log('Added to cart')}\n      />\n    </div>\n  );\n}\n","size_bytes":1106},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/pages/examples/MerchShop.tsx":{"content":"import MerchShop from '../MerchShop';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { CartProvider } from '@/contexts/CartContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\nimport Header from '@/components/Header';\n\nexport default function MerchShopExample() {\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <CartProvider>\n          <Header />\n          <MerchShop />\n        </CartProvider>\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":487},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/pages/OrganizerDashboard.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport StatCard from '@/components/StatCard';\nimport TournamentCard from '@/components/TournamentCard';\nimport { Trophy, Users, Calendar, Plus } from 'lucide-react';\n\nexport default function OrganizerDashboard() {\n  const [selectedTab, setSelectedTab] = useState('overview');\n\n  const stats = [\n    { title: 'Total Tournaments', value: '24', icon: Trophy },\n    { title: 'Active Players', value: '456', icon: Users },\n    { title: 'Upcoming Events', value: '8', icon: Calendar },\n  ];\n\n  const tournaments = [\n    {\n      id: '1',\n      name: 'Summer Slam 2025',\n      location: 'Downtown Courts',\n      date: 'June 15, 2025',\n      teams: 12,\n      maxTeams: 16,\n      status: 'upcoming' as const,\n    },\n    {\n      id: '2',\n      name: 'University Challenge',\n      location: 'Campus Recreation Center',\n      date: 'July 1, 2025',\n      teams: 8,\n      maxTeams: 8,\n      status: 'live' as const,\n    },\n    {\n      id: '3',\n      name: 'Spring Invitational',\n      location: 'City Park Courts',\n      date: 'May 20, 2025',\n      teams: 16,\n      maxTeams: 16,\n      status: 'completed' as const,\n    },\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-display font-bold mb-2\">Organizer Dashboard</h1>\n          <p className=\"text-muted-foreground\">Manage tournaments and coordinate events</p>\n        </div>\n        <Button className=\"gap-2\" data-testid=\"button-create-tournament\">\n          <Plus className=\"w-4 h-4\" />\n          Create Tournament\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n        {stats.map((stat) => (\n          <StatCard key={stat.title} {...stat} />\n        ))}\n      </div>\n\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"live\" data-testid=\"tab-live\">Live Matches</TabsTrigger>\n          <TabsTrigger value=\"brackets\" data-testid=\"tab-brackets\">Brackets</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {tournaments.map((tournament) => (\n              <TournamentCard\n                key={tournament.id}\n                {...tournament}\n                onView={() => console.log('Manage', tournament.name)}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"live\" className=\"space-y-4\">\n          <Card className=\"p-6\">\n            <h3 className=\"font-display font-semibold text-lg mb-4\">Live Match Scoring</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 bg-muted rounded-md\">\n                <div>\n                  <p className=\"font-semibold\">Court Kings vs Street Ballers</p>\n                  <p className=\"text-sm text-muted-foreground\">Court A - Q3</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-2xl font-mono font-bold\">15 - 12</p>\n                </div>\n              </div>\n              <Button className=\"w-full\" data-testid=\"button-update-score\">Update Score</Button>\n            </div>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"brackets\" className=\"space-y-4\">\n          <Card className=\"p-6\">\n            <h3 className=\"font-display font-semibold text-lg mb-4\">Tournament Brackets</h3>\n            <p className=\"text-muted-foreground mb-4\">Generate and manage tournament brackets</p>\n            <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-generate-bracket\">\n              Generate Bracket\n            </Button>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":4182},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/TournamentsPage.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Link } from 'wouter';\nimport { type Tournament } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Trophy, Calendar, MapPin, Users, Plus } from 'lucide-react';\nimport TournamentForm from '@/components/tournaments/TournamentForm';\n\nexport default function TournamentsPage() {\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n\n  const { data: tournaments = [], isLoading } = useQuery<Tournament[]>({\n    queryKey: ['/api/tournaments'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-muted-foreground\">Loading tournaments...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Tournament Management</h1>\n          <p className=\"text-muted-foreground\">Create and manage 3x3 basketball tournaments</p>\n        </div>\n        <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-open-create-tournament\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Tournament\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create New Tournament</DialogTitle>\n            </DialogHeader>\n            <TournamentForm onSuccess={() => setCreateDialogOpen(false)} />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {tournaments.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Trophy className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-xl font-semibold mb-2\">No tournaments yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Get started by creating your first tournament\n            </p>\n            <Button onClick={() => setCreateDialogOpen(true)} data-testid=\"button-create-first-tournament\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Tournament\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {tournaments.map((tournament) => (\n            <Link key={tournament.id} href={`/tournaments/${tournament.id}`}>\n              <Card \n                className=\"hover-elevate cursor-pointer h-full\"\n                data-testid={`card-tournament-${tournament.id}`}\n              >\n                <CardHeader>\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <CardTitle className=\"line-clamp-2\" data-testid={`text-tournament-name-${tournament.id}`}>\n                      {tournament.name}\n                    </CardTitle>\n                    <Badge \n                      variant={tournament.status === 'in-progress' ? 'default' : 'secondary'}\n                      data-testid={`badge-tournament-status-${tournament.id}`}\n                    >\n                      {tournament.status}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <MapPin className=\"w-4 h-4\" />\n                    <span>{tournament.location}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Calendar className=\"w-4 h-4\" />\n                    <span>{new Date(tournament.date).toLocaleDateString()}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Users className=\"w-4 h-4\" />\n                    <span>Max {tournament.maxTeams} teams</span>\n                  </div>\n                  <div className=\"pt-2\">\n                    <Badge variant=\"outline\">{tournament.format}</Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4634},"client/src/components/examples/TournamentCard.tsx":{"content":"import TournamentCard from '../TournamentCard';\n\nexport default function TournamentCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4\">\n      <TournamentCard\n        id=\"1\"\n        name=\"Summer Slam 2025\"\n        location=\"Downtown Courts\"\n        date=\"June 15, 2025\"\n        teams={12}\n        maxTeams={16}\n        status=\"upcoming\"\n        onRegister={() => console.log('Register clicked')}\n        onView={() => console.log('View clicked')}\n      />\n      <TournamentCard\n        id=\"2\"\n        name=\"University Challenge\"\n        location=\"Campus Recreation Center\"\n        date=\"July 1, 2025\"\n        teams={8}\n        maxTeams={8}\n        status=\"live\"\n        onView={() => console.log('View clicked')}\n      />\n      <TournamentCard\n        id=\"3\"\n        name=\"Spring Invitational\"\n        location=\"City Park Courts\"\n        date=\"May 20, 2025\"\n        teams={16}\n        maxTeams={16}\n        status=\"completed\"\n        onView={() => console.log('View clicked')}\n      />\n    </div>\n  );\n}\n","size_bytes":1056},"client/src/pages/MerchShop.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from '@/components/ui/sheet';\nimport ProductCard from '@/components/ProductCard';\nimport { useCart } from '@/contexts/CartContext';\nimport { ShoppingCart, X, Minus, Plus } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nconst products = [\n  {\n    id: '1',\n    name: 'Team Jersey',\n    price: 45.99,\n    image: 'https://images.unsplash.com/photo-1516450360452-9312f5e86fc7?w=400&h=400&fit=crop',\n    category: 'Apparel',\n    inStock: true,\n  },\n  {\n    id: '2',\n    name: 'Basketball',\n    price: 29.99,\n    image: 'https://images.unsplash.com/photo-1546519638-68e109498ffc?w=400&h=400&fit=crop',\n    category: 'Equipment',\n    inStock: true,\n  },\n  {\n    id: '3',\n    name: 'Sweatband Set',\n    price: 12.99,\n    image: 'https://images.unsplash.com/photo-1556906781-9a412961c28c?w=400&h=400&fit=crop',\n    category: 'Accessories',\n    inStock: false,\n  },\n  {\n    id: '4',\n    name: 'Hoops Cap',\n    price: 24.99,\n    image: 'https://images.unsplash.com/photo-1588850561407-ed78c282e89b?w=400&h=400&fit=crop',\n    category: 'Apparel',\n    inStock: true,\n  },\n  {\n    id: '5',\n    name: 'Training Shorts',\n    price: 34.99,\n    image: 'https://images.unsplash.com/photo-1591195853828-11db59a44f6b?w=400&h=400&fit=crop',\n    category: 'Apparel',\n    inStock: true,\n  },\n  {\n    id: '6',\n    name: 'Water Bottle',\n    price: 15.99,\n    image: 'https://images.unsplash.com/photo-1602143407151-7111542de6e8?w=400&h=400&fit=crop',\n    category: 'Accessories',\n    inStock: true,\n  },\n];\n\nexport default function MerchShop() {\n  const { items, addItem, updateQuantity, removeItem, total, clearCart } = useCart();\n  const { toast } = useToast();\n  const [filter, setFilter] = useState('All');\n\n  const categories = ['All', 'Apparel', 'Equipment', 'Accessories'];\n\n  const filteredProducts = filter === 'All'\n    ? products\n    : products.filter((p) => p.category === filter);\n\n  const handleAddToCart = (product: typeof products[0]) => {\n    addItem(product);\n    toast({\n      title: 'Added to cart',\n      description: `${product.name} has been added to your cart`,\n    });\n  };\n\n  const handleCheckout = () => {\n    toast({\n      title: 'Checkout',\n      description: 'Redirecting to checkout...',\n    });\n    console.log('Proceeding to checkout with items:', items);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-display font-bold mb-2\">Merchandise Shop</h1>\n          <p className=\"text-muted-foreground\">Official Stormers360 gear and equipment</p>\n        </div>\n        <Sheet>\n          <SheetTrigger asChild>\n            <Button className=\"gap-2\" data-testid=\"button-view-cart\">\n              <ShoppingCart className=\"w-4 h-4\" />\n              Cart ({items.length})\n            </Button>\n          </SheetTrigger>\n          <SheetContent>\n            <SheetHeader>\n              <SheetTitle>Shopping Cart</SheetTitle>\n              <SheetDescription>\n                {items.length === 0 ? 'Your cart is empty' : `${items.length} items in cart`}\n              </SheetDescription>\n            </SheetHeader>\n            <div className=\"mt-8 space-y-4\">\n              {items.map((item) => (\n                <Card key={item.id} className=\"p-4\">\n                  <div className=\"flex gap-3\">\n                    <img\n                      src={item.image}\n                      alt={item.name}\n                      className=\"w-16 h-16 object-cover rounded-md\"\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <h4 className=\"font-semibold text-sm\">{item.name}</h4>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => removeItem(item.id)}\n                          data-testid={`button-remove-${item.id}`}\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                      <p className=\"text-sm font-mono text-primary mb-2\">${item.price.toFixed(2)}</p>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          className=\"h-6 w-6\"\n                          onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                          data-testid={`button-decrease-${item.id}`}\n                        >\n                          <Minus className=\"w-3 h-3\" />\n                        </Button>\n                        <span className=\"text-sm font-mono w-8 text-center\">{item.quantity}</span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          className=\"h-6 w-6\"\n                          onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                          data-testid={`button-increase-${item.id}`}\n                        >\n                          <Plus className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n            {items.length > 0 && (\n              <div className=\"mt-8 space-y-4\">\n                <div className=\"flex items-center justify-between text-lg font-semibold\">\n                  <span>Total:</span>\n                  <span className=\"font-mono\">${total.toFixed(2)}</span>\n                </div>\n                <Button onClick={handleCheckout} className=\"w-full\" data-testid=\"button-checkout\">\n                  Checkout\n                </Button>\n                <Button variant=\"outline\" onClick={clearCart} className=\"w-full\" data-testid=\"button-clear-cart\">\n                  Clear Cart\n                </Button>\n              </div>\n            )}\n          </SheetContent>\n        </Sheet>\n      </div>\n\n      <div className=\"flex gap-2 mb-6 flex-wrap\">\n        {categories.map((category) => (\n          <Badge\n            key={category}\n            variant={filter === category ? 'default' : 'secondary'}\n            className=\"cursor-pointer\"\n            onClick={() => setFilter(category)}\n            data-testid={`filter-${category.toLowerCase()}`}\n          >\n            {category}\n          </Badge>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n        {filteredProducts.map((product) => (\n          <ProductCard\n            key={product.id}\n            {...product}\n            onAddToCart={() => handleAddToCart(product)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7199},"client/src/pages/examples/LoginPage.tsx":{"content":"import LoginPage from '../LoginPage';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\n\nexport default function LoginPageExample() {\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <LoginPage />\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":320},"client/src/components/Header.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ShoppingCart, LogOut, Trophy, LayoutDashboard, Store, MapPin, Film, TrendingUp } from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useCart } from '@/contexts/CartContext';\nimport ThemeToggle from './ThemeToggle';\nimport { Link, useLocation } from 'wouter';\nimport logoUrl from '@assets/logowhite_1760998128625.png';\n\nexport default function Header() {\n  const { user, logout } = useAuth();\n  const { itemCount } = useCart();\n  const [location] = useLocation();\n\n  if (!user) return null;\n\n  const navItems = [\n    { href: '/dashboard', label: 'Dashboard', icon: LayoutDashboard },\n    { href: '/tournaments', label: 'Tournaments', icon: Trophy },\n    { href: '/courts', label: 'Courts', icon: MapPin },\n    ...(user.role === 'Player' ? [{ href: '/development', label: 'Training', icon: TrendingUp }] : []),\n    { href: '/media', label: 'Media', icon: Film },\n    ...(user.role !== 'Organizer' ? [{ href: '/shop', label: 'Shop', icon: Store }] : []),\n  ];\n\n  return (\n    <header className=\"sticky top-0 z-50 border-b bg-background/95 backdrop-blur\">\n      <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n        <div className=\"flex items-center gap-6\">\n          <Link href=\"/\" className=\"flex items-center\">\n            <img \n              src={logoUrl} \n              alt=\"Stormers360 - Toulouse 3x3 Basketball\" \n              className=\"h-10 w-auto\"\n              style={{ filter: 'invert(1)' }}\n            />\n          </Link>\n\n          <nav className=\"hidden md:flex items-center gap-1\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location.startsWith(item.href);\n              return (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant={isActive ? 'default' : 'ghost'}\n                    className=\"gap-2\"\n                    data-testid={`nav-${item.label.toLowerCase()}`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    {item.label}\n                  </Button>\n                </Link>\n              );\n            })}\n          </nav>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"secondary\" className=\"hidden sm:flex\" data-testid=\"badge-user-role\">\n            {user.role}\n          </Badge>\n          {user.role !== 'Organizer' && (\n            <Link href=\"/shop\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-cart\">\n                <ShoppingCart className=\"w-5 h-5\" />\n                {itemCount > 0 && (\n                  <Badge className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\">\n                    {itemCount}\n                  </Badge>\n                )}\n              </Button>\n            </Link>\n          )}\n          <ThemeToggle />\n          <Button variant=\"ghost\" size=\"icon\" onClick={logout} data-testid=\"button-logout\">\n            <LogOut className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3224},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/pages/examples/SponsorDashboard.tsx":{"content":"import SponsorDashboard from '../SponsorDashboard';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { CartProvider } from '@/contexts/CartContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\nimport Header from '@/components/Header';\n\nexport default function SponsorDashboardExample() {\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <CartProvider>\n          <Header />\n          <SponsorDashboard />\n        </CartProvider>\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":515},"client/src/pages/examples/NotFound.tsx":{"content":"import NotFound from '../not-found';\n\nexport default function NotFoundExample() {\n  return <NotFound />;\n}\n","size_bytes":107},"design_guidelines.md":{"content":"# Design Guidelines: 3x3 Basketball Tournament Platform\n\n## Design Approach\n\n**Selected System:** Material Design with Sports Platform Customization  \n**Justification:** This platform balances information-dense dashboards (tournaments, stats, analytics) with visual content (media hub, merchandise). Material Design provides robust components for data displays while allowing customization for the sports context.\n\n**Key References:** ESPN Tournament interfaces, FIBA 3x3 platform aesthetics, Challonge's bracket clarity, combined with Material Design's structural principles.\n\n**Core Principles:**\n- Action-oriented interfaces with clear CTAs for tournament registration, team creation, and role selection\n- Real-time data presentation for live match scoring and tournament brackets\n- Role-based visual hierarchy (Player, Sponsor, Organizer views)\n- Mobile-first approach for on-court score entry and tournament viewing\n\n## Color Palette\n\n**Light Mode:**\n- Primary: 200 85% 45% (vibrant basketball orange)\n- Primary Variant: 200 90% 35% (deeper orange for active states)\n- Secondary: 220 70% 50% (professional blue for secondary actions)\n- Background: 0 0% 98% (off-white)\n- Surface: 0 0% 100% (white cards/panels)\n- Text Primary: 0 0% 13%\n- Text Secondary: 0 0% 40%\n\n**Dark Mode:**\n- Primary: 200 80% 55% (slightly brighter orange)\n- Primary Variant: 200 75% 45%\n- Secondary: 220 60% 60%\n- Background: 0 0% 8% (court-dark)\n- Surface: 0 0% 12% (elevated cards)\n- Text Primary: 0 0% 95%\n- Text Secondary: 0 0% 70%\n\n**Sponsor/Analytics Accents:**\n- Success: 140 60% 45% (green for positive metrics)\n- Warning: 40 95% 55% (gold for highlights/MVPs)\n- Error: 0 70% 50% (red for alerts)\n\n## Typography\n\n**Font Families:**\n- Primary: 'Inter' (Google Fonts) - clean, modern, excellent for data tables and dashboards\n- Display: 'Poppins' (Google Fonts) - bold, sporty for headings and tournament names\n- Monospace: 'JetBrains Mono' (Google Fonts) - for match scores and stats\n\n**Hierarchy:**\n- H1: Poppins Bold, 2.5rem (tournament names, page headers)\n- H2: Poppins SemiBold, 2rem (section headers)\n- H3: Poppins Medium, 1.5rem (card titles)\n- Body: Inter Regular, 1rem (all content)\n- Caption: Inter Regular, 0.875rem (metadata, timestamps)\n- Button: Inter Medium, 0.875-1rem (uppercase for primary actions)\n- Score Display: JetBrains Mono Bold, 3rem (live match scores)\n\n## Layout System\n\n**Spacing Units:** Consistent use of Tailwind units: **2, 4, 8, 12, 16** for all spacing  \n- Tight spacing: p-2, m-2 (compact data tables, stat chips)\n- Standard: p-4, gap-4 (form fields, card padding)\n- Comfortable: p-8, my-8 (section spacing, dashboard modules)\n- Generous: p-12, py-16 (hero sections, major page divisions)\n\n**Grid System:**\n- Dashboards: 3-column grid (lg:grid-cols-3) for metric cards, collapsing to single column on mobile\n- Tournament Brackets: Responsive horizontal scroll with fixed column widths\n- Merchandise: 4-column product grid (lg:grid-cols-4, md:grid-cols-3, sm:grid-cols-2)\n- Court Map: Full-width map container with sidebar filter panel\n\n**Container Widths:**\n- Full dashboards: max-w-7xl\n- Forms and wizards: max-w-3xl\n- Content pages: max-w-6xl\n\n## Component Library\n\n**Navigation:**\n- Top app bar with role badge (Player/Sponsor/Organizer) in top-right\n- Persistent side navigation for dashboard modules (collapsible on mobile)\n- Breadcrumb navigation for deep hierarchies (Tournament > Bracket > Match)\n- Bottom navigation bar on mobile for primary actions\n\n**Cards:**\n- Elevated cards with subtle shadows (shadow-md)\n- Tournament cards: Horizontal layout with image thumbnail, title, date, location, CTA\n- Stat cards: Large numeric display with label and trend indicator (â†‘/â†“)\n- Team/Player cards: Avatar, name, stats in compact format\n\n**Forms:**\n- Multi-step wizards for tournament creation and team registration\n- Inline validation with immediate feedback\n- File upload zones with drag-and-drop for media/brand assets\n- Role selector: Three large radio cards with icons and descriptions\n- Date/time pickers integrated with tournament scheduling\n\n**Data Display:**\n- Tournament brackets: Tree-view component with match nodes, expandable for details\n- Leaderboards: Striped tables with ranking badges and expandable rows for full stats\n- Analytics charts: Line/bar charts for sponsor engagement metrics\n- Match scoreboard: Large split-screen score display with timer and quarter indicators\n\n**Buttons:**\n- Primary: Solid orange fill for main actions (Register Team, Submit Score)\n- Secondary: Outlined for secondary actions\n- Text buttons: For tertiary actions in dense interfaces\n- FAB (Floating Action Button): Bottom-right for quick actions like \"Log Score\" during live matches\n\n**Overlays:**\n- Modal dialogs for confirmations (Submit Tournament, Complete Registration)\n- Bottom sheets on mobile for filters and quick actions\n- Snackbar notifications for success/error feedback (top-right, auto-dismiss)\n- Full-screen loading states for bracket generation\n\n## Module-Specific Designs\n\n**Login Page:**\n- Centered card layout on gradient background (orange to blue diagonal)\n- Email/password fields with Google button below\n- Role selector appears post-authentication as modal overlay with three prominent cards\n\n**Tournament Brackets:**\n- Horizontal scrollable bracket with zoom controls\n- Color-coded by match status (scheduled=gray, live=orange, complete=green)\n- Click match node to open score entry modal\n\n**Sponsor Dashboard:**\n- 3-column metric cards at top (Total Views, Engagement Rate, Merch Sales)\n- Chart section showing trend over tournament timeline\n- Active tournaments list with visibility metrics per tournament\n\n**Merchandise Shop:**\n- Hero banner with featured products\n- Filter sidebar (Category, Price, Team)\n- Product grid with hover zoom on images\n- Persistent cart drawer sliding from right\n\n**Court Map:**\n- Full-screen map with clustered pins\n- Filter panel on left (University, City, Availability)\n- Click pin to show court details card with booking info\n\n**Media Hub:**\n- Masonry grid layout for photos/videos\n- Upload button as prominent FAB\n- Filter tags as chips above grid\n- Lightbox viewer for full-screen media\n\n## Images\n\n**Hero Image:**\n- Login page: Dynamic 3x3 basketball action shot (players mid-jump, urban court background)\n- No other pages use hero images - dashboard modules prioritize immediate data access\n\n**Supplementary Images:**\n- Tournament cards: Court/venue thumbnails (16:9 aspect ratio)\n- Team/player profiles: Avatar photos (circular crop)\n- Merchandise: Product photos on white background (square 1:1)\n- Sponsor logos: High-contrast brand marks on dashboard\n- Media hub: User-uploaded tournament photos/videos in gallery\n\n## Animations\n\n**Minimal, Purposeful Motion:**\n- Page transitions: Simple fade-in (200ms)\n- Card hover: Subtle elevation increase (shadow transition)\n- Live score updates: Number flip animation (500ms) when score changes\n- Bracket progression: Smooth scroll to active match\n- No decorative or distracting animations - focus on content and functionality","size_bytes":7060},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/TournamentCard.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Calendar, MapPin, Users } from 'lucide-react';\n\ninterface TournamentCardProps {\n  id: string;\n  name: string;\n  location: string;\n  date: string;\n  teams: number;\n  maxTeams: number;\n  status: 'upcoming' | 'live' | 'completed';\n  onRegister?: () => void;\n  onView?: () => void;\n}\n\nexport default function TournamentCard({\n  name,\n  location,\n  date,\n  teams,\n  maxTeams,\n  status,\n  onRegister,\n  onView,\n}: TournamentCardProps) {\n  const statusColors = {\n    upcoming: 'bg-muted text-muted-foreground',\n    live: 'bg-primary text-primary-foreground',\n    completed: 'bg-chart-3 text-white',\n  };\n\n  return (\n    <Card className=\"p-4 hover-elevate\">\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex-1\">\n          <h3 className=\"font-display font-semibold text-lg mb-1\">{name}</h3>\n          <div className=\"flex flex-col gap-1 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-2\">\n              <MapPin className=\"w-4 h-4\" />\n              <span>{location}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4\" />\n              <span>{date}</span>\n            </div>\n          </div>\n        </div>\n        <Badge className={statusColors[status]}>{status}</Badge>\n      </div>\n      \n      <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-4\">\n        <Users className=\"w-4 h-4\" />\n        <span>{teams}/{maxTeams} teams registered</span>\n      </div>\n\n      <div className=\"flex gap-2\">\n        {status === 'upcoming' && onRegister && (\n          <Button onClick={onRegister} className=\"flex-1\" data-testid=\"button-register\">\n            Register Team\n          </Button>\n        )}\n        {onView && (\n          <Button variant=\"outline\" onClick={onView} className=\"flex-1\" data-testid=\"button-view\">\n            View Details\n          </Button>\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2109},"client/src/pages/TournamentDetailPage.tsx":{"content":"import { useState } from 'react';\nimport { useParams } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { type Tournament, type Team, type Match } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Trophy, Users, Activity, ChevronLeft, Plus } from 'lucide-react';\nimport { Link } from 'wouter';\nimport TournamentForm from '@/components/tournaments/TournamentForm';\nimport TeamRegistrationForm from '@/components/tournaments/TeamRegistrationForm';\nimport PlayerRegistrationForm from '@/components/tournaments/PlayerRegistrationForm';\nimport BracketGenerator from '@/components/tournaments/BracketGenerator';\nimport LiveMatchDashboard from '@/components/tournaments/LiveMatchDashboard';\n\nexport default function TournamentDetailPage() {\n  const { id } = useParams<{ id: string }>();\n  const [teamDialogOpen, setTeamDialogOpen] = useState(false);\n  const [selectedTeamForPlayers, setSelectedTeamForPlayers] = useState<string | null>(null);\n  const [selectedMatchForScoring, setSelectedMatchForScoring] = useState<Match | null>(null);\n\n  const { data: tournament, isLoading: tournamentLoading } = useQuery<Tournament>({\n    queryKey: ['/api/tournaments', id],\n  });\n\n  const { data: teams = [], isLoading: teamsLoading } = useQuery<Team[]>({\n    queryKey: ['/api/tournaments', id, 'teams'],\n    enabled: !!tournament,\n  });\n\n  const { data: matches = [] } = useQuery<Match[]>({\n    queryKey: ['/api/tournaments', id, 'matches'],\n    enabled: !!tournament,\n  });\n\n  if (tournamentLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-muted-foreground\">Loading tournament...</div>\n      </div>\n    );\n  }\n\n  if (!tournament) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-muted-foreground\">Tournament not found</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Link href=\"/tournaments\">\n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back-to-tournaments\">\n            <ChevronLeft className=\"w-5 h-5\" />\n          </Button>\n        </Link>\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-3\">\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-tournament-name\">\n              {tournament.name}\n            </h1>\n            <Badge variant={tournament.status === 'in-progress' ? 'default' : 'secondary'}>\n              {tournament.status}\n            </Badge>\n          </div>\n          <p className=\"text-muted-foreground\">\n            {tournament.location} â€¢ {new Date(tournament.date).toLocaleDateString()} â€¢ {tournament.format}\n          </p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"teams\" data-testid=\"tab-teams\">Teams ({teams.length})</TabsTrigger>\n          <TabsTrigger value=\"bracket\" data-testid=\"tab-bracket\">Bracket</TabsTrigger>\n          <TabsTrigger value=\"live\" data-testid=\"tab-live\">Live Scoring</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  Total Teams\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\" data-testid=\"text-total-teams\">\n                  {teams.length} / {tournament.maxTeams}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  Total Matches\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\" data-testid=\"text-total-matches\">\n                  {matches.length}\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  Completed\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\" data-testid=\"text-completed-matches\">\n                  {matches.filter(m => m.status === 'completed').length}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"teams\" className=\"space-y-6\">\n          <div className=\"flex justify-end\">\n            <Dialog open={teamDialogOpen} onOpenChange={setTeamDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-open-register-team\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Register Team\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Register Team</DialogTitle>\n                </DialogHeader>\n                <TeamRegistrationForm\n                  tournamentId={tournament.id}\n                  onSuccess={() => setTeamDialogOpen(false)}\n                />\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {teamsLoading ? (\n            <div className=\"text-center p-8\">Loading teams...</div>\n          ) : teams.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Users className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No teams registered</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Register teams to participate in this tournament\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {teams.map((team) => (\n                <Card key={team.id} data-testid={`card-team-${team.id}`}>\n                  <CardHeader>\n                    <CardTitle data-testid={`text-team-name-${team.id}`}>{team.name}</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    {team.university && (\n                      <p className=\"text-sm text-muted-foreground\">{team.university}</p>\n                    )}\n                    <div className=\"flex items-center gap-4 text-sm\">\n                      <span className=\"text-green-600 dark:text-green-400\">\n                        {team.wins}W\n                      </span>\n                      <span className=\"text-red-600 dark:text-red-400\">\n                        {team.losses}L\n                      </span>\n                    </div>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"w-full mt-2\"\n                          onClick={() => setSelectedTeamForPlayers(team.id)}\n                          data-testid={`button-add-players-${team.id}`}\n                        >\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Players\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add Player to {team.name}</DialogTitle>\n                        </DialogHeader>\n                        {selectedTeamForPlayers && (\n                          <PlayerRegistrationForm teamId={selectedTeamForPlayers} />\n                        )}\n                      </DialogContent>\n                    </Dialog>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"bracket\" className=\"space-y-6\">\n          <BracketGenerator tournament={tournament} />\n        </TabsContent>\n\n        <TabsContent value=\"live\" className=\"space-y-6\">\n          {matches.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Activity className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No matches scheduled</h3>\n                <p className=\"text-muted-foreground\">\n                  Generate the tournament bracket to create matches\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {matches\n                  .filter(m => m.status !== 'completed')\n                  .map((match) => (\n                    <Card\n                      key={match.id}\n                      className=\"hover-elevate cursor-pointer\"\n                      onClick={() => setSelectedMatchForScoring(match)}\n                      data-testid={`card-live-match-${match.id}`}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm text-muted-foreground\">{match.round}</span>\n                          <Badge variant=\"outline\">{match.status}</Badge>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"font-medium\">\n                              {teams.find(t => t.id === match.team1Id)?.name || 'Team 1'}\n                            </span>\n                            <span className=\"text-lg font-bold\">{match.team1Score}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"font-medium\">\n                              {teams.find(t => t.id === match.team2Id)?.name || 'Team 2'}\n                            </span>\n                            <span className=\"text-lg font-bold\">{match.team2Score}</span>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n              </div>\n\n              {selectedMatchForScoring && (\n                <Dialog\n                  open={!!selectedMatchForScoring}\n                  onOpenChange={(open) => !open && setSelectedMatchForScoring(null)}\n                >\n                  <DialogContent className=\"max-w-3xl\">\n                    <DialogHeader>\n                      <DialogTitle>Live Match Scoring</DialogTitle>\n                    </DialogHeader>\n                    <LiveMatchDashboard\n                      match={selectedMatchForScoring}\n                      onUpdate={() => setSelectedMatchForScoring(null)}\n                    />\n                  </DialogContent>\n                </Dialog>\n              )}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":11909},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-8 flex items-center justify-center\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  );\n}\n","size_bytes":304},"client/src/components/tournaments/PlayerRegistrationForm.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { insertPlayerSchema, type InsertPlayer } from '@shared/schema';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { UserPlus } from 'lucide-react';\n\ninterface PlayerRegistrationFormProps {\n  teamId: string;\n  onSuccess?: () => void;\n}\n\nexport default function PlayerRegistrationForm({ teamId, onSuccess }: PlayerRegistrationFormProps) {\n  const { toast } = useToast();\n\n  const form = useForm<InsertPlayer>({\n    resolver: zodResolver(insertPlayerSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      teamId,\n      jerseyNumber: undefined,\n      position: '',\n    },\n  });\n\n  const createPlayer = useMutation({\n    mutationFn: async (data: InsertPlayer) => {\n      return await apiRequest('POST', '/api/players', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teams', teamId, 'players'] });\n      toast({\n        title: 'Player added',\n        description: 'The player has been added successfully.',\n      });\n      form.reset({ name: '', email: '', teamId, jerseyNumber: undefined, position: '' });\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to add player. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertPlayer) => {\n    createPlayer.mutate(data);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <UserPlus className=\"w-5 h-5\" />\n          Add Player\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Player Name</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"John Doe\" \n                      {...field} \n                      data-testid=\"input-player-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email (Optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"email\"\n                      placeholder=\"john.doe@email.com\" \n                      {...field}\n                      value={field.value ?? ''}\n                      data-testid=\"input-player-email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"jerseyNumber\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Jersey Number (Optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"number\"\n                      placeholder=\"23\" \n                      {...field}\n                      value={field.value ?? ''}\n                      onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                      data-testid=\"input-player-jersey\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"position\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Position (Optional)</FormLabel>\n                  <Select \n                    onValueChange={field.onChange} \n                    defaultValue={field.value ?? ''}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-player-position\">\n                        <SelectValue placeholder=\"Select position\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"guard\">Guard</SelectItem>\n                      <SelectItem value=\"forward\">Forward</SelectItem>\n                      <SelectItem value=\"center\">Center</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={createPlayer.isPending}\n              data-testid=\"button-add-player\"\n            >\n              {createPlayer.isPending ? 'Adding...' : 'Add Player'}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5645},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertTournamentSchema,\n  insertTeamSchema,\n  insertPlayerSchema,\n  insertMatchSchema,\n  insertMatchStatsSchema,\n  insertProductSchema,\n  insertOrderSchema,\n  insertCourtSchema,\n  insertMediaSchema,\n  insertInquirySchema,\n  insertBrandAssetSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Tournament Routes\n  app.get(\"/api/tournaments\", async (req, res) => {\n    try {\n      const tournaments = await storage.getTournaments();\n      res.json(tournaments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tournaments\" });\n    }\n  });\n\n  app.get(\"/api/tournaments/:id\", async (req, res) => {\n    try {\n      const tournament = await storage.getTournament(req.params.id);\n      if (!tournament) {\n        return res.status(404).json({ message: \"Tournament not found\" });\n      }\n      res.json(tournament);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tournament\" });\n    }\n  });\n\n  app.post(\"/api/tournaments\", async (req, res) => {\n    try {\n      const validated = insertTournamentSchema.parse(req.body);\n      const tournament = await storage.createTournament(validated);\n      res.status(201).json(tournament);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid tournament data\" });\n    }\n  });\n\n  app.patch(\"/api/tournaments/:id\", async (req, res) => {\n    try {\n      const validated = insertTournamentSchema.partial().parse(req.body);\n      const tournament = await storage.updateTournament(req.params.id, validated);\n      if (!tournament) {\n        return res.status(404).json({ message: \"Tournament not found\" });\n      }\n      res.json(tournament);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid tournament data\" });\n    }\n  });\n\n  app.delete(\"/api/tournaments/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteTournament(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Tournament not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete tournament\" });\n    }\n  });\n\n  // Team Routes\n  app.get(\"/api/tournaments/:tournamentId/teams\", async (req, res) => {\n    try {\n      const teams = await storage.getTeamsByTournament(req.params.tournamentId);\n      res.json(teams);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch teams\" });\n    }\n  });\n\n  app.get(\"/api/teams/:id\", async (req, res) => {\n    try {\n      const team = await storage.getTeam(req.params.id);\n      if (!team) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n      res.json(team);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch team\" });\n    }\n  });\n\n  app.post(\"/api/teams\", async (req, res) => {\n    try {\n      const validated = insertTeamSchema.parse(req.body);\n      const team = await storage.createTeam(validated);\n      res.status(201).json(team);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid team data\" });\n    }\n  });\n\n  app.patch(\"/api/teams/:id\", async (req, res) => {\n    try {\n      const validated = insertTeamSchema.partial().parse(req.body);\n      const team = await storage.updateTeam(req.params.id, validated);\n      if (!team) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n      res.json(team);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid team data\" });\n    }\n  });\n\n  app.delete(\"/api/teams/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteTeam(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete team\" });\n    }\n  });\n\n  // Player Routes\n  app.get(\"/api/teams/:teamId/players\", async (req, res) => {\n    try {\n      const players = await storage.getPlayersByTeam(req.params.teamId);\n      res.json(players);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch players\" });\n    }\n  });\n\n  app.get(\"/api/players/:id\", async (req, res) => {\n    try {\n      const player = await storage.getPlayer(req.params.id);\n      if (!player) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n      res.json(player);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch player\" });\n    }\n  });\n\n  app.post(\"/api/players\", async (req, res) => {\n    try {\n      const validated = insertPlayerSchema.parse(req.body);\n      const player = await storage.createPlayer(validated);\n      res.status(201).json(player);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid player data\" });\n    }\n  });\n\n  app.patch(\"/api/players/:id\", async (req, res) => {\n    try {\n      const validated = insertPlayerSchema.partial().parse(req.body);\n      const player = await storage.updatePlayer(req.params.id, validated);\n      if (!player) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n      res.json(player);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid player data\" });\n    }\n  });\n\n  app.delete(\"/api/players/:id\", async (req, res) => {\n    try {\n      const success = await storage.deletePlayer(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete player\" });\n    }\n  });\n\n  // Match Routes\n  app.get(\"/api/tournaments/:tournamentId/matches\", async (req, res) => {\n    try {\n      const matches = await storage.getMatchesByTournament(req.params.tournamentId);\n      res.json(matches);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch matches\" });\n    }\n  });\n\n  app.get(\"/api/matches/:id\", async (req, res) => {\n    try {\n      const match = await storage.getMatch(req.params.id);\n      if (!match) {\n        return res.status(404).json({ message: \"Match not found\" });\n      }\n      res.json(match);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch match\" });\n    }\n  });\n\n  app.post(\"/api/matches\", async (req, res) => {\n    try {\n      const validated = insertMatchSchema.parse(req.body);\n      const match = await storage.createMatch(validated);\n      res.status(201).json(match);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid match data\" });\n    }\n  });\n\n  app.patch(\"/api/matches/:id\", async (req, res) => {\n    try {\n      const allowedUpdates = req.body;\n      delete allowedUpdates.id;\n      delete allowedUpdates.tournamentId;\n      delete allowedUpdates.team1Id;\n      delete allowedUpdates.team2Id;\n      const match = await storage.updateMatch(req.params.id, allowedUpdates);\n      if (!match) {\n        return res.status(404).json({ message: \"Match not found\" });\n      }\n      res.json(match);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update match\" });\n    }\n  });\n\n  app.delete(\"/api/matches/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteMatch(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Match not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete match\" });\n    }\n  });\n\n  // Match Stats Routes\n  app.get(\"/api/matches/:matchId/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getMatchStatsByMatch(req.params.matchId);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch match stats\" });\n    }\n  });\n\n  app.post(\"/api/match-stats\", async (req, res) => {\n    try {\n      const validated = insertMatchStatsSchema.parse(req.body);\n      const stats = await storage.createMatchStats(validated);\n      res.status(201).json(stats);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid match stats data\" });\n    }\n  });\n\n  app.patch(\"/api/match-stats/:id\", async (req, res) => {\n    try {\n      const allowedUpdates = req.body;\n      delete allowedUpdates.id;\n      delete allowedUpdates.matchId;\n      delete allowedUpdates.playerId;\n      const stats = await storage.updateMatchStats(req.params.id, allowedUpdates);\n      if (!stats) {\n        return res.status(404).json({ message: \"Match stats not found\" });\n      }\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update match stats\" });\n    }\n  });\n\n  // Product Routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const validated = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validated);\n      res.status(201).json(product);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid product data\" });\n    }\n  });\n\n  // Order Routes\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const validated = insertOrderSchema.parse(req.body);\n      const order = await storage.createOrder(validated);\n      res.status(201).json(order);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid order data\" });\n    }\n  });\n\n  // Court Routes\n  app.get(\"/api/courts\", async (req, res) => {\n    try {\n      const courts = await storage.getCourts();\n      res.json(courts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch courts\" });\n    }\n  });\n\n  app.get(\"/api/courts/:id\", async (req, res) => {\n    try {\n      const court = await storage.getCourt(req.params.id);\n      if (!court) {\n        return res.status(404).json({ message: \"Court not found\" });\n      }\n      res.json(court);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch court\" });\n    }\n  });\n\n  app.post(\"/api/courts\", async (req, res) => {\n    try {\n      const validated = insertCourtSchema.parse(req.body);\n      const court = await storage.createCourt(validated);\n      res.status(201).json(court);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid court data\" });\n    }\n  });\n\n  app.patch(\"/api/courts/:id\", async (req, res) => {\n    try {\n      const validated = insertCourtSchema.partial().parse(req.body);\n      const court = await storage.updateCourt(req.params.id, validated);\n      if (!court) {\n        return res.status(404).json({ message: \"Court not found\" });\n      }\n      res.json(court);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid court data\" });\n    }\n  });\n\n  // Media Routes\n  app.get(\"/api/media\", async (req, res) => {\n    try {\n      const { tournamentId } = req.query;\n      if (tournamentId && typeof tournamentId === 'string') {\n        const media = await storage.getMediaByTournament(tournamentId);\n        return res.json(media);\n      }\n      const media = await storage.getMedia();\n      res.json(media);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch media\" });\n    }\n  });\n\n  app.get(\"/api/media/:id\", async (req, res) => {\n    try {\n      const mediaItem = await storage.getMediaItem(req.params.id);\n      if (!mediaItem) {\n        return res.status(404).json({ message: \"Media not found\" });\n      }\n      res.json(mediaItem);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch media\" });\n    }\n  });\n\n  app.post(\"/api/media\", async (req, res) => {\n    try {\n      const validated = insertMediaSchema.parse(req.body);\n      const mediaItem = await storage.createMedia(validated);\n      res.status(201).json(mediaItem);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid media data\" });\n    }\n  });\n\n  // Inquiry Routes\n  app.get(\"/api/inquiries\", async (req, res) => {\n    try {\n      const inquiries = await storage.getInquiries();\n      res.json(inquiries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inquiries\" });\n    }\n  });\n\n  app.post(\"/api/inquiries\", async (req, res) => {\n    try {\n      const validated = insertInquirySchema.parse(req.body);\n      const inquiry = await storage.createInquiry(validated);\n      res.status(201).json(inquiry);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid inquiry data\" });\n    }\n  });\n\n  app.patch(\"/api/inquiries/:id\", async (req, res) => {\n    try {\n      const inquiry = await storage.updateInquiry(req.params.id, req.body);\n      if (!inquiry) {\n        return res.status(404).json({ message: \"Inquiry not found\" });\n      }\n      res.json(inquiry);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update inquiry\" });\n    }\n  });\n\n  // Brand Assets Routes\n  app.get(\"/api/brand-assets\", async (req, res) => {\n    try {\n      const { sponsorId } = req.query;\n      if (!sponsorId || typeof sponsorId !== 'string') {\n        return res.status(400).json({ message: \"sponsorId required\" });\n      }\n      const assets = await storage.getBrandAssets(sponsorId);\n      res.json(assets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch brand assets\" });\n    }\n  });\n\n  app.post(\"/api/brand-assets\", async (req, res) => {\n    try {\n      const validated = insertBrandAssetSchema.parse(req.body);\n      const asset = await storage.createBrandAsset(validated);\n      res.status(201).json(asset);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid brand asset data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":14574},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 13%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 0 0% 13%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 0 0% 13%;\n\n  --sidebar-border: 0 0% 90%;\n\n  --sidebar-primary: 270 70% 55%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 0 4% 88%;\n\n  --sidebar-accent-foreground: 0 0% 13%;\n\n  --sidebar-ring: 270 70% 55%;\n\n  --popover: 0 0% 95%;\n\n  --popover-foreground: 0 0% 13%;\n\n  --popover-border: 0 0% 87%;\n\n  --primary: 270 70% 55%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 2% 92%;\n\n  --secondary-foreground: 0 0% 13%;\n\n  --muted: 0 4% 90%;\n\n  --muted-foreground: 0 0% 40%;\n\n  --accent: 330 60% 85%;\n\n  --accent-foreground: 0 0% 13%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 75%;\n  --ring: 270 70% 55%;\n  --chart-1: 270 80% 60%;\n  --chart-2: 320 65% 70%;\n  --chart-3: 140 60% 45%;\n  --chart-4: 280 50% 50%;\n  --chart-5: 310 55% 65%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --font-display: Poppins, sans-serif;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.10);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.08), 0px 1px 2px -1px hsl(0 0% 0% / 0.08);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10);\n  --shadow-md: 0px 6px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.10), 0px 4px 6px -4px hsl(0 0% 0% / 0.10);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.10), 0px 8px 10px -6px hsl(0 0% 0% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 0 0% 18%;\n\n  --card: 0 0% 12%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 0 0% 16%;\n\n  --sidebar: 0 0% 10%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 0 0% 14%;\n\n  --sidebar-primary: 270 65% 65%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 0 4% 16%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 270 65% 65%;\n\n  --popover: 0 0% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 0 0% 20%;\n\n  --primary: 270 65% 65%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 2% 18%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 0 4% 16%;\n\n  --muted-foreground: 0 0% 70%;\n\n  --accent: 330 50% 25%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 30%;\n  --ring: 270 65% 65%;\n  --chart-1: 270 75% 70%;\n  --chart-2: 320 60% 70%;\n  --chart-3: 140 55% 55%;\n  --chart-4: 280 50% 60%;\n  --chart-5: 310 55% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.30);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.25), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.30), 0px 2px 4px -2px hsl(0 0% 0% / 0.30);\n  --shadow-md: 0px 6px 8px -1px hsl(0 0% 0% / 0.30), 0px 4px 6px -2px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.35), 0px 4px 6px -4px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.40), 0px 8px 10px -6px hsl(0 0% 0% / 0.40);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11105},"replit.md":{"content":"# Stormers360 - 3x3 Basketball Tournament Platform\n\n## Overview\n\nStormers360 is a comprehensive web platform for managing 3x3 basketball tournaments in Toulouse. The application serves three distinct user roles: Players (who register for tournaments and track stats), Sponsors (who monitor brand engagement and merchandise sales), and Organizers (who create and manage tournaments). The platform features tournament management with bracket generation, live match scoring, a merchandise shop with shopping cart functionality, and role-based dashboards with performance analytics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System**\n- React with TypeScript for type-safe component development\n- Vite as the build tool and development server\n- Wouter for lightweight client-side routing instead of React Router\n\n**UI Component System**\n- Shadcn/ui component library built on Radix UI primitives\n- Tailwind CSS with custom design system based on Material Design principles\n- CSS variables for theming with light/dark mode support\n- Custom color palette featuring basketball orange (primary) and professional blue (secondary)\n- Typography using Inter (primary), Poppins (display), and JetBrains Mono (monospace) fonts\n\n**State Management**\n- React Context API for global state (AuthContext, CartContext, ThemeContext)\n- TanStack Query (React Query) for server state management and API caching\n- Local storage for persistence of user sessions, cart items, and theme preferences\n\n**Design Rationale**: The combination of Shadcn/ui and Tailwind provides a highly customizable component system while maintaining consistency. Material Design principles ensure information-dense dashboards remain readable. TanStack Query eliminates the need for Redux by handling async state, caching, and mutations declaratively.\n\n### Backend Architecture\n\n**Server Framework**\n- Express.js running on Node.js\n- RESTful API design with conventional HTTP methods (GET, POST, PATCH, DELETE)\n- Middleware for JSON parsing, URL encoding, and request logging\n\n**API Structure**\n- Resource-based endpoints: `/api/tournaments`, `/api/teams`, `/api/players`, `/api/matches`, `/api/match-stats`\n- Nested routes for related resources (e.g., `/api/tournaments/:id/teams`)\n- Standardized error handling with appropriate HTTP status codes\n- Request/response logging middleware that tracks duration and captures JSON responses\n\n**Data Layer**\n- Storage abstraction layer (IStorage interface) separating business logic from data access\n- Drizzle ORM for type-safe database queries and schema management\n- Schema definitions shared between client and server via `@shared/schema`\n- Zod schemas for runtime validation derived from Drizzle table definitions\n\n**Design Rationale**: The storage abstraction allows swapping database implementations without changing route handlers. Using Drizzle with Zod provides end-to-end type safety from database to API to frontend. Express middleware architecture keeps concerns separated (logging, error handling, authentication).\n\n### Database Schema\n\n**Core Entities**\n- **users**: Authentication with username/password (prepared for session management)\n- **tournaments**: Tournament metadata including name, location, date, format, status, and team limits\n- **teams**: Team registration tied to specific tournaments with win/loss records\n- **players**: Individual player profiles with team assignments, jersey numbers, and positions\n- **matches**: Game records linking two teams with scores, MVP designation, court assignments, and round information\n- **matchStats**: Granular player statistics per match (points, assists, rebounds, steals, blocks)\n\n**Relationships**\n- One tournament has many teams\n- One team has many players\n- One tournament has many matches\n- One match involves two teams and has many player statistics\n- Players can be designated as match MVPs\n\n**Design Rationale**: The schema supports the full tournament lifecycle from registration through bracket generation to live scoring. Separating match statistics from matches allows detailed player analytics without bloating the match table. UUID primary keys enable distributed systems and avoid sequential ID guessing.\n\n### Authentication & Authorization\n\n**Current Implementation**\n- Mock authentication system using React Context\n- Email/password and Google OAuth login flows (mocked)\n- Role selection dialog after authentication\n- Session persistence via localStorage\n- User object includes role (Player/Sponsor/Organizer) for UI customization\n\n**Future Considerations**\n- Real authentication should use JWT tokens or session cookies\n- Password hashing with bcrypt before storage\n- OAuth integration with actual Google APIs\n- Role-based access control (RBAC) middleware on backend routes\n\n**Design Rationale**: Starting with mock auth allows rapid frontend development. The role-based architecture is already in place (DashboardRouter switches on user.role), making it straightforward to add real authentication later without restructuring components.\n\n### Module Organization\n\n**Role-Based Dashboards**\n- PlayerDashboard: Tournament browsing, stat tracking, registration\n- SponsorDashboard: Engagement metrics, brand asset management, tournament monitoring\n- OrganizerDashboard: Tournament creation, team/player management, match scheduling\n\n**Shared Components**\n- TournamentCard: Reusable tournament display with status badges\n- StatCard: Metric display with trending indicators\n- ProductCard: Merchandise item display for the shop\n- Header: Navigation with role-specific menu items and cart indicator\n\n**Tournament Management Features**\n- TournamentForm: Create tournaments with validation\n- TeamRegistrationForm: Register teams for tournaments\n- PlayerRegistrationForm: Add players to teams\n- BracketGenerator: Automatic bracket creation based on registered teams\n- LiveMatchDashboard: Real-time score entry and MVP selection\n\n**Design Rationale**: Component-based architecture with clear separation of concerns. Shared components reduce duplication while role-specific dashboards provide tailored experiences. Forms use react-hook-form with Zod validation for consistent error handling.\n\n## External Dependencies\n\n### Database\n- **Neon Serverless PostgreSQL**: Serverless Postgres with WebSocket support for edge deployments\n- Connection pooling via `@neondatabase/serverless`\n- Database URL required via environment variable `DATABASE_URL`\n\n### UI Libraries\n- **Radix UI**: Unstyled, accessible component primitives (dialog, dropdown, tooltip, tabs, etc.)\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n- **React Icons**: Additional icon sets (used for social login icons)\n\n### Form Management\n- **React Hook Form**: Performant form state management with minimal re-renders\n- **Zod**: TypeScript-first schema validation\n- **@hookform/resolvers**: Bridge between React Hook Form and Zod\n\n### Data Fetching\n- **TanStack Query**: Async state management with automatic caching, background refetching, and optimistic updates\n\n### Development Tools\n- **Drizzle Kit**: Database migrations and schema push\n- **TypeScript**: Static type checking\n- **esbuild**: Fast JavaScript bundler for production builds\n- **tsx**: TypeScript execution for development server\n\n### Design Assets\n- **Google Fonts**: Inter, Poppins, JetBrains Mono\n- **Custom Logo**: Stored in `attached_assets/logowhite_1760998128625.png`\n\n### Replit-Specific Plugins\n- `@replit/vite-plugin-runtime-error-modal`: Development error overlay\n- `@replit/vite-plugin-cartographer`: Code navigation tool\n- `@replit/vite-plugin-dev-banner`: Development environment indicator\n\n**Design Rationale**: Neon Serverless allows deployment without managing database servers. Radix UI provides accessible components out of the box, reducing WCAG compliance effort. TanStack Query eliminates boilerplate for API calls and provides offline support. Drizzle's TypeScript integration catches schema errors at compile time rather than runtime.","size_bytes":8125},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/pages/not-found.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-background\">\n      <Card className=\"w-full max-w-md mx-4 p-8 text-center\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"p-4 bg-destructive/10 rounded-full\">\n            <AlertCircle className=\"h-12 w-12 text-destructive\" />\n          </div>\n        </div>\n        <h1 className=\"text-3xl font-display font-bold mb-2\">404 - Page Not Found</h1>\n        <p className=\"text-muted-foreground mb-6\">\n          The page you're looking for doesn't exist or has been moved.\n        </p>\n        <Link href=\"/\">\n          <Button className=\"w-full\" data-testid=\"button-home\">\n            Go to Dashboard\n          </Button>\n        </Link>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":988},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nexport default function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === 'light' ? (\n        <Moon className=\"w-5 h-5\" />\n      ) : (\n        <Sun className=\"w-5 h-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":511},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react';\n\nexport type UserRole = 'Player' | 'Sponsor' | 'Organizer';\n\nexport interface AuthUser {\n  id: string;\n  email: string;\n  name: string;\n  role: UserRole;\n  university?: string;\n  team?: string;\n}\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  login: (email: string, password: string) => Promise<void>;\n  loginWithGoogle: () => Promise<void>;\n  selectRole: (role: UserRole) => void;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<AuthUser | null>(null);\n\n  useEffect(() => {\n    const savedUser = localStorage.getItem('authUser');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    const mockUser: AuthUser = {\n      id: '1',\n      email,\n      name: email.split('@')[0],\n      role: 'Player',\n      university: 'Sample University',\n      team: 'Court Kings',\n    };\n    setUser(mockUser);\n    localStorage.setItem('authUser', JSON.stringify(mockUser));\n  };\n\n  const loginWithGoogle = async () => {\n    const mockUser: AuthUser = {\n      id: '2',\n      email: 'google.user@example.com',\n      name: 'Google User',\n      role: 'Player',\n      university: 'Tech University',\n      team: 'Street Ballers',\n    };\n    setUser(mockUser);\n    localStorage.setItem('authUser', JSON.stringify(mockUser));\n  };\n\n  const selectRole = (role: UserRole) => {\n    if (user) {\n      const updatedUser = { ...user, role };\n      setUser(updatedUser);\n      localStorage.setItem('authUser', JSON.stringify(updatedUser));\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('authUser');\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        login,\n        loginWithGoogle,\n        selectRole,\n        logout,\n        isAuthenticated: !!user,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2292},"client/src/pages/examples/DashboardRouter.tsx":{"content":"import DashboardRouter from '../DashboardRouter';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { CartProvider } from '@/contexts/CartContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\nimport Header from '@/components/Header';\n\nexport default function DashboardRouterExample() {\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <CartProvider>\n          <Header />\n          <DashboardRouter />\n        </CartProvider>\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":511},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/tournaments/TournamentForm.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { insertTournamentSchema, type InsertTournament } from '@shared/schema';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Trophy } from 'lucide-react';\n\ninterface TournamentFormProps {\n  onSuccess?: () => void;\n}\n\nexport default function TournamentForm({ onSuccess }: TournamentFormProps) {\n  const { toast } = useToast();\n\n  const form = useForm<InsertTournament>({\n    resolver: zodResolver(insertTournamentSchema),\n    defaultValues: {\n      name: '',\n      location: '',\n      date: '',\n      format: 'single-elimination',\n      status: 'upcoming',\n      maxTeams: 16,\n    },\n  });\n\n  const createTournament = useMutation({\n    mutationFn: async (data: InsertTournament) => {\n      return await apiRequest('POST', '/api/tournaments', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tournaments'] });\n      toast({\n        title: 'Tournament created',\n        description: 'The tournament has been created successfully.',\n      });\n      form.reset();\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to create tournament. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertTournament) => {\n    createTournament.mutate(data);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Trophy className=\"w-5 h-5\" />\n          Create New Tournament\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tournament Name</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Summer 3x3 Championship\" \n                      {...field} \n                      data-testid=\"input-tournament-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"location\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Location</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Toulouse Sports Arena\" \n                      {...field} \n                      data-testid=\"input-tournament-location\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"date\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Date</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"date\" \n                      {...field} \n                      data-testid=\"input-tournament-date\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"format\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Format</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-tournament-format\">\n                        <SelectValue placeholder=\"Select format\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"single-elimination\">Single Elimination</SelectItem>\n                      <SelectItem value=\"double-elimination\">Double Elimination</SelectItem>\n                      <SelectItem value=\"round-robin\">Round Robin</SelectItem>\n                      <SelectItem value=\"pool-play\">Pool Play</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"maxTeams\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Max Teams</FormLabel>\n                  <Select \n                    onValueChange={(value) => field.onChange(parseInt(value))} \n                    defaultValue={field.value?.toString()}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-max-teams\">\n                        <SelectValue placeholder=\"Select max teams\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"8\">8 Teams</SelectItem>\n                      <SelectItem value=\"16\">16 Teams</SelectItem>\n                      <SelectItem value=\"32\">32 Teams</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={createTournament.isPending}\n              data-testid=\"button-create-tournament\"\n            >\n              {createTournament.isPending ? 'Creating...' : 'Create Tournament'}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6443},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/tournaments/BracketGenerator.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { type Tournament, type Team, type Match } from '@shared/schema';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Trophy, RefreshCw } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface BracketGeneratorProps {\n  tournament: Tournament;\n}\n\nexport default function BracketGenerator({ tournament }: BracketGeneratorProps) {\n  const { toast } = useToast();\n\n  const { data: teams = [], isLoading: teamsLoading } = useQuery<Team[]>({\n    queryKey: ['/api/tournaments', tournament.id, 'teams'],\n  });\n\n  const { data: matches = [], isLoading: matchesLoading } = useQuery<Match[]>({\n    queryKey: ['/api/tournaments', tournament.id, 'matches'],\n  });\n\n  const generateBracket = useMutation({\n    mutationFn: async () => {\n      const sortedTeams = [...teams].sort(() => Math.random() - 0.5);\n      const rounds = Math.ceil(Math.log2(sortedTeams.length));\n      const matchesPerRound: Record<number, number> = {};\n      \n      for (let round = 1; round <= rounds; round++) {\n        matchesPerRound[round] = Math.pow(2, rounds - round);\n      }\n\n      const newMatches: Match[] = [];\n      \n      for (let i = 0; i < sortedTeams.length; i += 2) {\n        if (i + 1 < sortedTeams.length) {\n          const response = await apiRequest('POST', '/api/matches', {\n            tournamentId: tournament.id,\n            team1Id: sortedTeams[i].id,\n            team2Id: sortedTeams[i + 1].id,\n            round: 'Round 1',\n            status: 'scheduled',\n            courtNumber: `Court ${Math.floor(i / 2) + 1}`,\n          });\n          const match = await response.json();\n          newMatches.push(match);\n        }\n      }\n\n      return newMatches;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tournaments', tournament.id, 'matches'] });\n      toast({\n        title: 'Bracket generated',\n        description: 'Tournament bracket has been created successfully.',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to generate bracket. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  if (teamsLoading || matchesLoading) {\n    return <div className=\"text-center p-8\">Loading...</div>;\n  }\n\n  const groupByRound = (matches: Match[]): Record<string, Match[]> => {\n    return matches.reduce((acc, match) => {\n      if (!acc[match.round]) {\n        acc[match.round] = [];\n      }\n      acc[match.round].push(match);\n      return acc;\n    }, {} as Record<string, Match[]>);\n  };\n\n  const matchesByRound = groupByRound(matches);\n  const rounds = Object.keys(matchesByRound).sort();\n\n  const getTeamName = (teamId: string) => {\n    return teams.find(t => t.id === teamId)?.name || 'TBD';\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Trophy className=\"w-5 h-5\" />\n            Tournament Bracket\n          </CardTitle>\n          {matches.length === 0 && teams.length >= 2 && (\n            <Button\n              onClick={() => generateBracket.mutate()}\n              disabled={generateBracket.isPending}\n              data-testid=\"button-generate-bracket\"\n            >\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              {generateBracket.isPending ? 'Generating...' : 'Generate Bracket'}\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        {matches.length === 0 ? (\n          <div className=\"text-center p-8 text-muted-foreground\">\n            {teams.length < 2 ? (\n              <p>Need at least 2 teams to generate bracket</p>\n            ) : (\n              <p>Click \"Generate Bracket\" to create the tournament structure</p>\n            )}\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {rounds.map((round, roundIndex) => (\n              <div key={round} className=\"space-y-3\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  {round}\n                  <Badge variant=\"secondary\" data-testid={`text-round-${roundIndex + 1}`}>\n                    {matchesByRound[round].length} {matchesByRound[round].length === 1 ? 'Match' : 'Matches'}\n                  </Badge>\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {matchesByRound[round].map((match) => (\n                    <Card \n                      key={match.id} \n                      className=\"hover-elevate\"\n                      data-testid={`card-match-${match.id}`}\n                    >\n                      <CardContent className=\"p-4 space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">{match.courtNumber}</span>\n                          <Badge \n                            variant={match.status === 'completed' ? 'default' : 'outline'}\n                            data-testid={`badge-match-status-${match.id}`}\n                          >\n                            {match.status}\n                          </Badge>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <div className={`flex items-center justify-between p-2 rounded ${match.winnerId === match.team1Id ? 'bg-primary/10' : ''}`}>\n                            <span \n                              className=\"font-medium\"\n                              data-testid={`text-team1-${match.id}`}\n                            >\n                              {getTeamName(match.team1Id)}\n                            </span>\n                            <span \n                              className=\"text-lg font-bold\"\n                              data-testid={`text-team1-score-${match.id}`}\n                            >\n                              {match.team1Score}\n                            </span>\n                          </div>\n                          <div className={`flex items-center justify-between p-2 rounded ${match.winnerId === match.team2Id ? 'bg-primary/10' : ''}`}>\n                            <span \n                              className=\"font-medium\"\n                              data-testid={`text-team2-${match.id}`}\n                            >\n                              {getTeamName(match.team2Id)}\n                            </span>\n                            <span \n                              className=\"text-lg font-bold\"\n                              data-testid={`text-team2-score-${match.id}`}\n                            >\n                              {match.team2Score}\n                            </span>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7278},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Tournament Management Schemas\nexport const tournaments = pgTable(\"tournaments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  location: text(\"location\").notNull(),\n  date: text(\"date\").notNull(),\n  format: text(\"format\").notNull(),\n  status: text(\"status\").notNull().default('upcoming'),\n  maxTeams: integer(\"max_teams\").notNull().default(16),\n  createdAt: text(\"created_at\").notNull(),\n});\n\nexport const insertTournamentSchema = createInsertSchema(tournaments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertTournament = z.infer<typeof insertTournamentSchema>;\nexport type Tournament = typeof tournaments.$inferSelect;\n\nexport const teams = pgTable(\"teams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  university: text(\"university\"),\n  tournamentId: varchar(\"tournament_id\").notNull(),\n  wins: integer(\"wins\").notNull().default(0),\n  losses: integer(\"losses\").notNull().default(0),\n});\n\nexport const insertTeamSchema = createInsertSchema(teams).omit({\n  id: true,\n  wins: true,\n  losses: true,\n});\n\nexport type InsertTeam = z.infer<typeof insertTeamSchema>;\nexport type Team = typeof teams.$inferSelect;\n\nexport const players = pgTable(\"players\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  teamId: varchar(\"team_id\").notNull(),\n  jerseyNumber: integer(\"jersey_number\"),\n  position: text(\"position\"),\n});\n\nexport const insertPlayerSchema = createInsertSchema(players).omit({\n  id: true,\n});\n\nexport type InsertPlayer = z.infer<typeof insertPlayerSchema>;\nexport type Player = typeof players.$inferSelect;\n\nexport const matches = pgTable(\"matches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tournamentId: varchar(\"tournament_id\").notNull(),\n  team1Id: varchar(\"team1_id\").notNull(),\n  team2Id: varchar(\"team2_id\").notNull(),\n  team1Score: integer(\"team1_score\").notNull().default(0),\n  team2Score: integer(\"team2_score\").notNull().default(0),\n  round: text(\"round\").notNull(),\n  status: text(\"status\").notNull().default('scheduled'),\n  winnerId: varchar(\"winner_id\"),\n  mvpId: varchar(\"mvp_id\"),\n  courtNumber: text(\"court_number\"),\n});\n\nexport const insertMatchSchema = createInsertSchema(matches).omit({\n  id: true,\n  team1Score: true,\n  team2Score: true,\n  winnerId: true,\n  mvpId: true,\n});\n\nexport type InsertMatch = z.infer<typeof insertMatchSchema>;\nexport type Match = typeof matches.$inferSelect;\n\nexport const matchStats = pgTable(\"match_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  matchId: varchar(\"match_id\").notNull(),\n  playerId: varchar(\"player_id\").notNull(),\n  points: integer(\"points\").notNull().default(0),\n  assists: integer(\"assists\").notNull().default(0),\n  rebounds: integer(\"rebounds\").notNull().default(0),\n});\n\nexport const insertMatchStatsSchema = createInsertSchema(matchStats).omit({\n  id: true,\n});\n\nexport type InsertMatchStats = z.infer<typeof insertMatchStatsSchema>;\nexport type MatchStats = typeof matchStats.$inferSelect;\n\nexport const tournamentsRelations = relations(tournaments, ({ many }) => ({\n  teams: many(teams),\n  matches: many(matches),\n}));\n\nexport const teamsRelations = relations(teams, ({ one, many }) => ({\n  tournament: one(tournaments, {\n    fields: [teams.tournamentId],\n    references: [tournaments.id],\n  }),\n  players: many(players),\n  matchesAsTeam1: many(matches, { relationName: \"team1\" }),\n  matchesAsTeam2: many(matches, { relationName: \"team2\" }),\n}));\n\nexport const playersRelations = relations(players, ({ one, many }) => ({\n  team: one(teams, {\n    fields: [players.teamId],\n    references: [teams.id],\n  }),\n  matchStats: many(matchStats),\n}));\n\nexport const matchesRelations = relations(matches, ({ one, many }) => ({\n  tournament: one(tournaments, {\n    fields: [matches.tournamentId],\n    references: [tournaments.id],\n  }),\n  team1: one(teams, {\n    fields: [matches.team1Id],\n    references: [teams.id],\n    relationName: \"team1\",\n  }),\n  team2: one(teams, {\n    fields: [matches.team2Id],\n    references: [teams.id],\n    relationName: \"team2\",\n  }),\n  winner: one(teams, {\n    fields: [matches.winnerId],\n    references: [teams.id],\n  }),\n  mvp: one(players, {\n    fields: [matches.mvpId],\n    references: [players.id],\n  }),\n  stats: many(matchStats),\n}));\n\nexport const matchStatsRelations = relations(matchStats, ({ one }) => ({\n  match: one(matches, {\n    fields: [matchStats.matchId],\n    references: [matches.id],\n  }),\n  player: one(players, {\n    fields: [matchStats.playerId],\n    references: [players.id],\n  }),\n}));\n\n// Merchandise Module Schemas\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: integer(\"price\").notNull(),\n  category: text(\"category\").notNull(),\n  image: text(\"image\"),\n  inStock: integer(\"in_stock\").notNull().default(1),\n  createdAt: text(\"created_at\").notNull(),\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  items: text(\"items\").notNull(),\n  total: integer(\"total\").notNull(),\n  status: text(\"status\").notNull().default('pending'),\n  createdAt: text(\"created_at\").notNull(),\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\n\n// Court Module Schemas\nexport const courts = pgTable(\"courts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  location: text(\"location\").notNull(),\n  university: text(\"university\"),\n  city: text(\"city\").notNull(),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  availability: text(\"availability\").notNull().default('available'),\n  contactInfo: text(\"contact_info\"),\n  sponsorVisibility: integer(\"sponsor_visibility\").notNull().default(0),\n  createdAt: text(\"created_at\").notNull(),\n});\n\nexport const insertCourtSchema = createInsertSchema(courts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertCourt = z.infer<typeof insertCourtSchema>;\nexport type Court = typeof courts.$inferSelect;\n\n// Media Module Schemas\nexport const media = pgTable(\"media\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  type: text(\"type\").notNull(),\n  url: text(\"url\").notNull(),\n  thumbnailUrl: text(\"thumbnail_url\"),\n  tournamentId: varchar(\"tournament_id\"),\n  teamId: varchar(\"team_id\"),\n  sponsorId: varchar(\"sponsor_id\"),\n  tags: text(\"tags\"),\n  uploadedBy: varchar(\"uploaded_by\"),\n  createdAt: text(\"created_at\").notNull(),\n});\n\nexport const insertMediaSchema = createInsertSchema(media).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertMedia = z.infer<typeof insertMediaSchema>;\nexport type Media = typeof media.$inferSelect;\n\n// Sponsor Module Schemas\nexport const inquiries = pgTable(\"inquiries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(),\n  companyName: text(\"company_name\").notNull(),\n  contactName: text(\"contact_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull().default('new'),\n  createdAt: text(\"created_at\").notNull(),\n});\n\nexport const insertInquirySchema = createInsertSchema(inquiries).omit({\n  id: true,\n  createdAt: true,\n  status: true,\n});\n\nexport type InsertInquiry = z.infer<typeof insertInquirySchema>;\nexport type Inquiry = typeof inquiries.$inferSelect;\n\nexport const brandAssets = pgTable(\"brand_assets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sponsorId: varchar(\"sponsor_id\").notNull(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(),\n  url: text(\"url\").notNull(),\n  createdAt: text(\"created_at\").notNull(),\n});\n\nexport const insertBrandAssetSchema = createInsertSchema(brandAssets).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertBrandAsset = z.infer<typeof insertBrandAssetSchema>;\nexport type BrandAsset = typeof brandAssets.$inferSelect;\n","size_bytes":9171},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"server/seed.ts":{"content":"import { storage } from \"./storage\";\n\nasync function seed() {\n  console.log(\"Seeding database...\");\n\n  // Seed Products\n  const products = [\n    {\n      name: \"Team Jersey\",\n      description: \"Official Stormers360 tournament jersey with breathable fabric\",\n      price: 4599,\n      category: \"Apparel\",\n      image: \"https://images.unsplash.com/photo-1516450360452-9312f5e86fc7?w=400&h=400&fit=crop\",\n      inStock: 1\n    },\n    {\n      name: \"Basketball\",\n      description: \"Official 3x3 basketball - FIBA approved\",\n      price: 2999,\n      category: \"Equipment\",\n      image: \"https://images.unsplash.com/photo-1546519638-68e109498ffc?w=400&h=400&fit=crop\",\n      inStock: 1\n    },\n    {\n      name: \"Sweatband Set\",\n      description: \"Sweat-wicking headband and wristband combo\",\n      price: 1299,\n      category: \"Accessories\",\n      image: \"https://images.unsplash.com/photo-1556906781-9a412961c28c?w=400&h=400&fit=crop\",\n      inStock: 0\n    },\n    {\n      name: \"Hoops Cap\",\n      description: \"Adjustable basketball cap with Stormers360 logo\",\n      price: 2499,\n      category: \"Apparel\",\n      image: \"https://images.unsplash.com/photo-1588850561407-ed78c282e89b?w=400&h=400&fit=crop\",\n      inStock: 1\n    },\n    {\n      name: \"Training Shorts\",\n      description: \"Performance athletic shorts with deep pockets\",\n      price: 3499,\n      category: \"Apparel\",\n      image: \"https://images.unsplash.com/photo-1591195853828-11db59a44f6b?w=400&h=400&fit=crop\",\n      inStock: 1\n    },\n    {\n      name: \"Water Bottle\",\n      description: \"Insulated 1L water bottle - keeps drinks cold\",\n      price: 1599,\n      category: \"Accessories\",\n      image: \"https://images.unsplash.com/photo-1602143407151-7111542de6e8?w=400&h=400&fit=crop\",\n      inStock: 1\n    },\n  ];\n\n  for (const product of products) {\n    await storage.createProduct(product);\n  }\n\n  console.log(`Created ${products.length} products`);\n\n  // Seed Courts\n  const courts = [\n    {\n      name: \"Campus Central Court\",\n      location: \"University Paul Sabatier\",\n      university: \"Paul Sabatier\",\n      city: \"Toulouse\",\n      latitude: \"43.5617\",\n      longitude: \"1.4658\",\n      availability: \"available\",\n      contactInfo: \"contact@paul-sabatier.fr\",\n      sponsorVisibility: 1250\n    },\n    {\n      name: \"Jean JaurÃ¨s Basketball Arena\",\n      location: \"Place Jean JaurÃ¨s\",\n      university: null,\n      city: \"Toulouse\",\n      latitude: \"43.6083\",\n      longitude: \"1.4483\",\n      availability: \"available\",\n      contactInfo: \"jeanjau res@toulouse.fr\",\n      sponsorVisibility: 2100\n    },\n    {\n      name: \"Capitole Court\",\n      location: \"University of Toulouse Capitole\",\n      university: \"Toulouse Capitole\",\n      city: \"Toulouse\",\n      latitude: \"43.6045\",\n      longitude: \"1.4440\",\n      availability: \"available\",\n      contactInfo: \"sports@ut-capitole.fr\",\n      sponsorVisibility: 980\n    },\n    {\n      name: \"INSA Sports Complex\",\n      location: \"INSA Toulouse\",\n      university: \"INSA\",\n      city: \"Toulouse\",\n      latitude: \"43.5697\",\n      longitude: \"1.4647\",\n      availability: \"booked\",\n      contactInfo: \"sports@insa-toulouse.fr\",\n      sponsorVisibility: 1560\n    },\n    {\n      name: \"Mirail University Courts\",\n      location: \"University of Toulouse-Jean JaurÃ¨s\",\n      university: \"Jean JaurÃ¨s\",\n      city: \"Toulouse\",\n      latitude: \"43.5796\",\n      longitude: \"1.4027\",\n      availability: \"available\",\n      contactInfo: \"sports@univ-tlse2.fr\",\n      sponsorVisibility: 850\n    },\n    {\n      name: \"Purpan Outdoor Court\",\n      location: \"Campus Purpan\",\n      university: \"ENVT\",\n      city: \"Toulouse\",\n      latitude: \"43.6123\",\n      longitude: \"1.3993\",\n      availability: \"available\",\n      contactInfo: \"purpan@envt.fr\",\n      sponsorVisibility: 650\n    }\n  ];\n\n  for (const court of courts) {\n    await storage.createCourt(court);\n  }\n\n  console.log(`Created ${courts.length} courts`);\n\n  console.log(\"Seeding complete!\");\n}\n\nseed().catch(console.error);\n","size_bytes":3992},"client/src/components/SponsorInquiryForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\n\ninterface InquiryFormData {\n  type: string;\n  companyName: string;\n  contactName: string;\n  email: string;\n  phone: string;\n  message: string;\n}\n\ninterface SponsorInquiryFormProps {\n  type: \"corporate\" | \"b2b\";\n  title: string;\n  description: string;\n}\n\nexport default function SponsorInquiryForm({ type, title, description }: SponsorInquiryFormProps) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState<InquiryFormData>({\n    type,\n    companyName: \"\",\n    contactName: \"\",\n    email: \"\",\n    phone: \"\",\n    message: \"\"\n  });\n\n  const submitInquiry = useMutation({\n    mutationFn: async (data: InquiryFormData) => {\n      const response = await fetch(\"/api/inquiries\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error(\"Failed to submit inquiry\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Inquiry sent!\",\n        description: \"Our team will contact you within 24-48 hours.\"\n      });\n      setFormData({\n        type,\n        companyName: \"\",\n        contactName: \"\",\n        email: \"\",\n        phone: \"\",\n        message: \"\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send inquiry. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    submitInquiry.mutate(formData);\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <h2 className=\"text-xl font-display font-semibold mb-2\">{title}</h2>\n      <p className=\"text-muted-foreground mb-4\">{description}</p>\n      \n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"companyName\">Company Name</Label>\n          <Input\n            id=\"companyName\"\n            value={formData.companyName}\n            onChange={(e) => setFormData({ ...formData, companyName: e.target.value })}\n            required\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"contactName\">Contact Person</Label>\n          <Input\n            id=\"contactName\"\n            value={formData.contactName}\n            onChange={(e) => setFormData({ ...formData, contactName: e.target.value })}\n            required\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"email\">Email</Label>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            value={formData.email}\n            onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n            required\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"phone\">Phone (optional)</Label>\n          <Input\n            id=\"phone\"\n            type=\"tel\"\n            value={formData.phone}\n            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"message\">Message</Label>\n          <Textarea\n            id=\"message\"\n            value={formData.message}\n            onChange={(e) => setFormData({ ...formData, message: e.target.value })}\n            rows={4}\n            placeholder=\"Tell us about your sponsorship interests or service needs...\"\n            required\n          />\n        </div>\n\n        <Button type=\"submit\" className=\"w-full\" disabled={submitInquiry.isPending}>\n          {submitInquiry.isPending ? \"Sending...\" : \"Submit Inquiry\"}\n        </Button>\n      </form>\n    </Card>\n  );\n}\n","size_bytes":3919},"client/src/pages/CourtsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MapPin, Phone, Building2, Users } from \"lucide-react\";\n\ninterface Court {\n  id: string;\n  name: string;\n  location: string;\n  university: string | null;\n  city: string;\n  availability: string;\n  contactInfo: string;\n  sponsorVisibility: number;\n}\n\nexport default function CourtsPage() {\n  const [cityFilter, setCityFilter] = useState(\"all\");\n  const [universityFilter, setUniversityFilter] = useState(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: courts = [], isLoading } = useQuery<Court[]>({\n    queryKey: ['/api/courts'],\n  });\n\n  const filteredCourts = courts.filter(court => {\n    const matchesCity = cityFilter === \"all\" || court.city === cityFilter;\n    const matchesUniversity = universityFilter === \"all\" || court.university === universityFilter;\n    const matchesSearch = court.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         court.location.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesCity && matchesUniversity && matchesSearch;\n  });\n\n  const cities = [...new Set(courts.map(c => c.city))];\n  const universities = [...new Set(courts.map(c => c.university).filter(Boolean))];\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center h-full\">Loading courts...</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-display font-bold mb-2\">Training Hall</h1>\n        <p className=\"text-muted-foreground\">Find and book 3x3 basketball courts in Toulouse</p>\n      </div>\n\n      <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n        <Input\n          placeholder=\"Search courts...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"flex-1\"\n        />\n        <Select value={cityFilter} onValueChange={setCityFilter}>\n          <SelectTrigger className=\"w-full md:w-48\">\n            <SelectValue placeholder=\"Filter by city\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Cities</SelectItem>\n            {cities.map(city => (\n              <SelectItem key={city} value={city}>{city}</SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <Select value={universityFilter} onValueChange={setUniversityFilter}>\n          <SelectTrigger className=\"w-full md:w-48\">\n            <SelectValue placeholder=\"Filter by university\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Universities</SelectItem>\n            {universities.map(uni => (\n              <SelectItem key={uni} value={uni!}>{uni}</SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredCourts.map((court) => (\n          <Card key={court.id} className=\"hover-elevate\">\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <CardTitle className=\"text-lg\">{court.name}</CardTitle>\n                <Badge variant={court.availability === 'available' ? 'default' : 'secondary'}>\n                  {court.availability}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-start gap-2 text-sm\">\n                <MapPin className=\"w-4 h-4 mt-0.5 text-muted-foreground\" />\n                <div>\n                  <div>{court.location}</div>\n                  <div className=\"text-muted-foreground\">{court.city}</div>\n                </div>\n              </div>\n              \n              {court.university && (\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Building2 className=\"w-4 h-4 text-muted-foreground\" />\n                  <span>{court.university}</span>\n                </div>\n              )}\n\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                <span>{court.contactInfo}</span>\n              </div>\n\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Users className=\"w-4 h-4 text-muted-foreground\" />\n                <span>{court.sponsorVisibility.toLocaleString()} monthly visitors</span>\n              </div>\n\n              <Button \n                className=\"w-full mt-4\" \n                variant={court.availability === 'available' ? 'default' : 'secondary'}\n                disabled={court.availability !== 'available'}\n              >\n                {court.availability === 'available' ? 'Book Court' : 'Currently Booked'}\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredCourts.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">No courts found matching your filters</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5480},"client/src/pages/DevelopmentCenterPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Trophy, Target, TrendingUp, Calendar } from \"lucide-react\";\n\ninterface Player {\n  id: string;\n  name: string;\n  teamId: string;\n  position?: string;\n  jerseyNumber?: number;\n}\n\ninterface MatchStats {\n  points: number;\n  assists: number;\n  rebounds: number;\n}\n\nexport default function DevelopmentCenterPage() {\n  const [selectedTab, setSelectedTab] = useState(\"stats\");\n\n  const mockPlayerStats = {\n    totalGames: 24,\n    avgPoints: 12.5,\n    avgAssists: 3.2,\n    avgRebounds: 4.8,\n    winRate: 67,\n    recentGames: [\n      { id: '1', opponent: 'Team Thunder', points: 15, assists: 4, rebounds: 5, result: 'W' },\n      { id: '2', opponent: 'Team Storm', points: 10, assists: 2, rebounds: 6, result: 'L' },\n      { id: '3', opponent: 'Team Lightning', points: 18, assists: 5, rebounds: 3, result: 'W' },\n      { id: '4', opponent: 'Team Blaze', points: 11, assists: 3, rebounds: 7, result: 'W' },\n      { id: '5', opponent: 'Team Frost', points: 14, assists: 4, rebounds: 4, result: 'W' },\n    ]\n  };\n\n  const skillProgress = [\n    { skill: 'Shooting', progress: 75 },\n    { skill: 'Passing', progress: 65 },\n    { skill: 'Defense', progress: 80 },\n    { skill: 'Rebounds', progress: 70 },\n    { skill: 'Speed', progress: 85 },\n  ];\n\n  const upcomingTraining = [\n    { id: '1', date: '2025-11-05', title: 'Shooting Clinic', time: '10:00 AM' },\n    { id: '2', date: '2025-11-08', title: 'Defense Workshop', time: '2:00 PM' },\n    { id: '3', date: '2025-11-12', title: '1v1 Tournament', time: '4:00 PM' },\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-display font-bold mb-2\">Development Center</h1>\n        <p className=\"text-muted-foreground\">Track your progress and improve your game</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"p-3 rounded-full bg-primary/10\">\n              <Trophy className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold\">{mockPlayerStats.totalGames}</div>\n              <div className=\"text-sm text-muted-foreground\">Games Played</div>\n            </div>\n          </div>\n        </Card>\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"p-3 rounded-full bg-primary/10\">\n              <Target className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold\">{mockPlayerStats.avgPoints}</div>\n              <div className=\"text-sm text-muted-foreground\">Points/Game</div>\n            </div>\n          </div>\n        </Card>\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"p-3 rounded-full bg-primary/10\">\n              <TrendingUp className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold\">{mockPlayerStats.winRate}%</div>\n              <div className=\"text-sm text-muted-foreground\">Win Rate</div>\n            </div>\n          </div>\n        </Card>\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"p-3 rounded-full bg-primary/10\">\n              <Calendar className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold\">{upcomingTraining.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Training Sessions</div>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      <Tabs value={selectedTab} onValueChange={setSelectedTab}>\n        <TabsList>\n          <TabsTrigger value=\"stats\">Performance Stats</TabsTrigger>\n          <TabsTrigger value=\"skills\">Skill Development</TabsTrigger>\n          <TabsTrigger value=\"training\">Training Schedule</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"stats\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Game Performance</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockPlayerStats.recentGames.map((game) => (\n                  <div key={game.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-semibold\">{game.opponent}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {game.points} PTS â€¢ {game.assists} AST â€¢ {game.rebounds} REB\n                      </div>\n                    </div>\n                    <Badge variant={game.result === 'W' ? 'default' : 'secondary'}>\n                      {game.result}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"skills\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Skill Progress</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {skillProgress.map((skill) => (\n                <div key={skill.skill}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium\">{skill.skill}</span>\n                    <span className=\"text-sm text-muted-foreground\">{skill.progress}%</span>\n                  </div>\n                  <Progress value={skill.progress} className=\"h-2\" />\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"training\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Upcoming Training Sessions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {upcomingTraining.map((session) => (\n                <div key={session.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <div className=\"font-semibold\">{session.title}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {new Date(session.date).toLocaleDateString()} â€¢ {session.time}\n                    </div>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">Register</Button>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":7137},"client/src/pages/MediaHubPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Upload, Video, Image as ImageIcon, Share2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface Media {\n  id: string;\n  title: string;\n  type: string;\n  url: string;\n  thumbnailUrl?: string;\n  tournamentId?: string;\n  tags?: string;\n  createdAt: string;\n}\n\nexport default function MediaHubPage() {\n  const { toast } = useToast();\n  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);\n  const [filter, setFilter] = useState(\"all\");\n  const [uploadData, setUploadData] = useState({\n    title: \"\",\n    type: \"video\",\n    url: \"\",\n    tournamentId: \"\",\n    tags: \"\"\n  });\n\n  const { data: mediaList = [] } = useQuery<Media[]>({\n    queryKey: ['/api/media'],\n  });\n\n  const uploadMedia = useMutation({\n    mutationFn: async (data: typeof uploadData) => {\n      const response = await fetch(\"/api/media\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error(\"Failed to upload\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/media'] });\n      toast({\n        title: \"Media uploaded!\",\n        description: \"Your content has been added to the media hub\"\n      });\n      setUploadDialogOpen(false);\n      setUploadData({ title: \"\", type: \"video\", url: \"\", tournamentId: \"\", tags: \"\" });\n    }\n  });\n\n  const handleUpload = (e: React.FormEvent) => {\n    e.preventDefault();\n    uploadMedia.mutate(uploadData);\n  };\n\n  const filteredMedia = filter === \"all\" \n    ? mediaList \n    : mediaList.filter(m => m.type === filter);\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-display font-bold mb-2\">Media Hub</h1>\n          <p className=\"text-muted-foreground\">Share and browse tournament videos and photos</p>\n        </div>\n        <Dialog open={uploadDialogOpen} onOpenChange={setUploadDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"gap-2\">\n              <Upload className=\"w-4 h-4\" />\n              Upload Media\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Upload New Media</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleUpload} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Title</Label>\n                <Input\n                  id=\"title\"\n                  value={uploadData.title}\n                  onChange={(e) => setUploadData({ ...uploadData, title: e.target.value })}\n                  placeholder=\"Amazing dunk from finals\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"type\">Type</Label>\n                <Select value={uploadData.type} onValueChange={(v) => setUploadData({ ...uploadData, type: v })}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"video\">Video</SelectItem>\n                    <SelectItem value=\"photo\">Photo</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"url\">URL (mock)</Label>\n                <Input\n                  id=\"url\"\n                  value={uploadData.url}\n                  onChange={(e) => setUploadData({ ...uploadData, url: e.target.value })}\n                  placeholder=\"https://example.com/media.mp4\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"tags\">Tags (comma-separated)</Label>\n                <Input\n                  id=\"tags\"\n                  value={uploadData.tags}\n                  onChange={(e) => setUploadData({ ...uploadData, tags: e.target.value })}\n                  placeholder=\"dunk, finals, 2025\"\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\" disabled={uploadMedia.isPending}>\n                {uploadMedia.isPending ? \"Uploading...\" : \"Upload\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs value={filter} onValueChange={setFilter} className=\"mb-6\">\n        <TabsList>\n          <TabsTrigger value=\"all\">All Media</TabsTrigger>\n          <TabsTrigger value=\"video\">Videos</TabsTrigger>\n          <TabsTrigger value=\"photo\">Photos</TabsTrigger>\n        </TabsList>\n      </Tabs>\n\n      {filteredMedia.length === 0 ? (\n        <Card className=\"p-12 text-center\">\n          <div className=\"mb-4\">\n            {filter === \"video\" ? (\n              <Video className=\"w-16 h-16 mx-auto text-muted-foreground\" />\n            ) : (\n              <ImageIcon className=\"w-16 h-16 mx-auto text-muted-foreground\" />\n            )}\n          </div>\n          <h3 className=\"text-xl font-semibold mb-2\">No media yet</h3>\n          <p className=\"text-muted-foreground mb-4\">Upload videos and photos from tournaments</p>\n          <Button onClick={() => setUploadDialogOpen(true)}>\n            <Upload className=\"w-4 h-4 mr-2\" />\n            Upload Media\n          </Button>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredMedia.map((item) => (\n            <Card key={item.id} className=\"overflow-hidden hover-elevate\">\n              <div className=\"aspect-video bg-muted flex items-center justify-center\">\n                {item.type === 'video' ? (\n                  <Video className=\"w-12 h-12 text-muted-foreground\" />\n                ) : (\n                  <ImageIcon className=\"w-12 h-12 text-muted-foreground\" />\n                )}\n              </div>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <h3 className=\"font-semibold line-clamp-1\">{item.title}</h3>\n                  <Badge variant=\"secondary\">{item.type}</Badge>\n                </div>\n                {item.tags && (\n                  <div className=\"flex flex-wrap gap-1 mb-3\">\n                    {item.tags.split(',').map((tag, i) => (\n                      <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                        {tag.trim()}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                    View\n                  </Button>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <Share2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7698}},"version":2}